<mxfile host="app.diagrams.net" modified="2022-12-05T12:55:26.627Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" etag="G5ggHC-gViULoRZSzLwg" version="20.6.0" type="github">
  <diagram id="ho1o4B3E-l8eYltIAmrv" name="第 1 页">
    <mxGraphModel dx="794" dy="413" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="7geZkpw3Z43b3UevWiiN-1" value="&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;BIO、NIO、多路复用器的区别：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;多路复用器属于NIO的范畴。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;首先，所有的IO都要经历以下过程：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;服务端：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;1.创建一个socket获得一个文件描述符socket。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;2.绑定端口bind。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;3.监听是否有客户端连接listen。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;BIO：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;在服务端accept方法调用时：如果没有连接来时，会阻塞住，直到有新连接来临。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;如果是用单线程来处理连接，当没有连接来到时，会占用CPU！！！影响程序效率！&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;且如果处理accept的后续逻辑耗时较长时，会影响后续连接的处理！！！&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;这时，我们可以通过多线程的思想来解决BIO的问题，在accept之后的逻辑，可以&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;扔到一个线程池里面去执行！&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;弊端：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;1、线程的这种解决方法，适用于少量的连接，因为线程是很宝贵的资源，占用内存，&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial; font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;创建和销毁很耗费时间，有的人会说用线程池，即使使用线程池，大量的IO请求过来的时候，&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial; font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;如果有些后续处理逻辑稍微慢一些，就会占着线程不放手，影响全局的响应速度！&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px; background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;2、accept的阻塞还是没解决，没有请求的时候还是会占CPU！&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;注意：BIO模型在accept之后，这个文件描述符后续的读写，可以用while死循环来做。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;因为不像多路复用模型，可以由内核监测文件描述符的变化！或者NIO自行将文件描述符加入一个List。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;NIO：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;可以在accept、read之前设置不阻塞！&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;循环accept，把连接上的描述符加入一个集合，遍历集合，进行read、write。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;align=left;" parent="1" vertex="1">
          <mxGeometry x="700" y="120" width="1180" height="1420" as="geometry" />
        </mxCell>
        <mxCell id="7geZkpw3Z43b3UevWiiN-2" value="https://blog.csdn.net/Java_ttcd/article/details/126317375&lt;br&gt;https://blog.csdn.net/adminpd/article/details/124553590" style="rounded=0;whiteSpace=wrap;html=1;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="260" y="30" width="720" height="80" as="geometry" />
        </mxCell>
        <mxCell id="7geZkpw3Z43b3UevWiiN-3" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;这几种模式，哪些能通过一个或者少量线程处理海量IO的连接？&lt;br&gt;首先，BIO，accept没啥影响，反正也是由连接会直接来，拿出来了直接交给&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="50" y="990" width="580" height="180" as="geometry" />
        </mxCell>
        <mxCell id="La09_VNI6gY7_joqpI0x-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;https://www.cnblogs.com/codderYouzg/p/14723720.html&lt;br&gt;讲解NIO&amp;nbsp; Selector底层&lt;br&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="180" width="470" height="120" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-1" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="570" y="1830" width="640" height="280" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-2" value="&lt;font style=&quot;font-size: 24px;&quot;&gt;Server&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="860" y="1830" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-3" value="" style="ellipse;whiteSpace=wrap;html=1;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="580" y="1985" width="220" height="120" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-4" value="" style="ellipse;whiteSpace=wrap;html=1;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="910" y="1930" width="290" height="170" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-5" value="epoll" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="1030" y="1930" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-7" value="&lt;font style=&quot;font-size: 14px;&quot;&gt;ServerSocket&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=24;" parent="1" vertex="1">
          <mxGeometry x="630" y="2030" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-9" value="1.首先，需要先启动服务端吧。&lt;br&gt;2.服务端首先创建一个ServerSocket，绑定端口，用于接收客户端的链接。&lt;br&gt;&lt;span style=&quot;text-align: center;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#ff0000&quot;&gt;127.0.0.1:9090&amp;nbsp; &amp;nbsp;0.0.0.0：*&lt;/font&gt;&lt;/b&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: center;&quot;&gt;一个fd文件描述符，表示服务端的9090端口可以跟任意IP和端口连接。&lt;br&gt;3.通过Selector.open()方法创建多路复用器。其中包含一个红黑树和一个链表。&lt;br&gt;4.&lt;/span&gt;ServerSocket+accpet&amp;nbsp;&amp;nbsp;&lt;span style=&quot;text-align: center;&quot;&gt;register到多路复用器。&lt;br&gt;5.客户端连接进来，红黑树上有数据，就复制到链表里面去。然后服务端selector.select()，可以传递一个超时参数，返回的是链表里面的数量。selectKeys()返回具体的集合。遍历访问其属性（isAccept、isWrite、isRead）。&lt;br&gt;6.accept之后就出现一个新的fd，代表跟客户端的socket。然后可以注册一个read到多路复用器selector里面，就可以读取客户端写入的数据了。&lt;br&gt;&lt;/span&gt;" style="shape=note;whiteSpace=wrap;html=1;backgroundOutline=1;darkOpacity=0.05;fontSize=14;align=left;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="1340" y="1815" width="630" height="310" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-10" value="9090端口" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=14;" parent="1" vertex="1">
          <mxGeometry x="610" y="2060" width="100" height="20" as="geometry" />
        </mxCell>
        <mxCell id="8oNnTrJqZva6qR_juFnn-1" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="w--zyUQJSbkvS63GyZV3-13" target="w--zyUQJSbkvS63GyZV3-14" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-13" value="&lt;font color=&quot;#000000&quot;&gt;红黑树&lt;/font&gt;" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;fontSize=14;fontColor=#FF0000;" parent="1" vertex="1">
          <mxGeometry x="920" y="1980" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-14" value="链表" style="rounded=1;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="1090" y="1980" width="100" height="60" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-15" value="Client1" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="370" y="2350" width="150" height="140" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-16" value="Client2" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="680" y="2350" width="160" height="160" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-17" value="Client3" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="990" y="2350" width="160" height="160" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=1;entryDx=0;entryDy=0;fontSize=14;fontColor=#000000;curved=1;" parent="1" source="w--zyUQJSbkvS63GyZV3-18" target="w--zyUQJSbkvS63GyZV3-3" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="520" y="2087" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-22" value="connect" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=14;fontColor=#000000;" parent="w--zyUQJSbkvS63GyZV3-21" vertex="1" connectable="0">
          <mxGeometry x="-0.1598" y="-14" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-18" value="SocketChannel" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="450" y="2320" width="100" height="60" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-19" value="SocketChannel" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="760" y="2330" width="100" height="60" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-20" value="SocketChannel" style="ellipse;whiteSpace=wrap;html=1;fontSize=14;fontColor=#000000;" parent="1" vertex="1">
          <mxGeometry x="1070" y="2330" width="100" height="60" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-27" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;fontSize=14;fontColor=#000000;curved=1;" parent="1" source="w--zyUQJSbkvS63GyZV3-3" target="w--zyUQJSbkvS63GyZV3-13" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="w--zyUQJSbkvS63GyZV3-28" value="注册accept" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];fontSize=14;fontColor=#000000;" parent="w--zyUQJSbkvS63GyZV3-27" vertex="1" connectable="0">
          <mxGeometry x="-0.172" y="-1" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="8oNnTrJqZva6qR_juFnn-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0;exitDx=0;exitDy=0;entryX=0;entryY=1;entryDx=0;entryDy=0;curved=1;" parent="1" source="8oNnTrJqZva6qR_juFnn-2" target="w--zyUQJSbkvS63GyZV3-4" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8oNnTrJqZva6qR_juFnn-4" value="创建" style="edgeLabel;html=1;align=center;verticalAlign=middle;resizable=0;points=[];" parent="8oNnTrJqZva6qR_juFnn-3" vertex="1" connectable="0">
          <mxGeometry x="-0.1822" y="2" relative="1" as="geometry">
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="8oNnTrJqZva6qR_juFnn-2" value="Selector.open()" style="ellipse;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1181" y="2180" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="t2xLIWqGpShQBHgeLnUq-1" value="" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="60" width="120" height="80" as="geometry" />
        </mxCell>
        <mxCell id="t2xLIWqGpShQBHgeLnUq-2" value="其实socket就是一个4元组，tcp/ip确认了ip端口就能发送读取了。" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
          <mxGeometry x="1480" y="1739" width="370" height="30" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
