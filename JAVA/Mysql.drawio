<mxfile host="app.diagrams.net" modified="2023-09-21T09:45:46.962Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36" etag="TYki23XTLrayHILauKEy" version="21.7.5" type="github">
  <diagram name="第 1 页" id="L6XU-YJSm6NN8EeBNm4k">
    <mxGraphModel dx="2607" dy="2547" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="aYSDuqsWhtXODDXYn9be-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;为什么使用B+树作为存储数据结构呢？普通二叉树、B树、红黑树为什呢不行？&lt;br&gt;&lt;br&gt;B+树结构和B树结构的区别？它们的叶子结点和非叶子结点存储的是什么？&lt;br&gt;&lt;br&gt;哈希索引的优劣势是什么？&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="50" y="60" width="740" height="150" as="geometry" />
        </mxCell>
        <mxCell id="aYSDuqsWhtXODDXYn9be-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;Mysql有2中存储引擎分别是什么？物理结构上如何区分？逻辑结构上有什么不同？&lt;br&gt;&lt;br&gt;Mysql中为什么要建议搞一个连续递增的主键呢？如果没有主键，数据库会先从列中找一个没有重复数据的列作为主键，如果没有满足的列，那么就会自己维护一个隐藏自增列作为主键？&lt;br&gt;&lt;br&gt;如果不是连续递增的，那么维护B+树的时候，插入就很麻烦了，就会频繁进行大量的调整，影响效率。&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="44" y="230" width="836" height="170" as="geometry" />
        </mxCell>
        <mxCell id="aYSDuqsWhtXODDXYn9be-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;聚簇索引和非聚簇索引的区别？&lt;br&gt;&lt;br&gt;二级索引是什么意思？二级索引回表操作是什么意思？二级索引的叶子结点存的是什么？&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="44" y="420" width="740" height="120" as="geometry" />
        </mxCell>
        <mxCell id="DzlcBEAfJtIRjQRNxWo9-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;Explain的使用&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="20" y="1120" width="740" height="120" as="geometry" />
        </mxCell>
        <mxCell id="PFGi73NgZuRSLPyA7w7K-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;联合索引（包括联合主键索引）是什么？&lt;br&gt;&lt;br&gt;覆盖索引是什么？走二级索引一定比主键索引慢吗？走二级索引一定会进行回表吗？&lt;br&gt;&lt;br&gt;不一定的。如果查询的字段刚好二级索引（这里建立的是联合索引的二级索引）包含完了，那么就不会回表。而且因为二级索引跟主键索引比，不包含所有的字段数据。那可能查询起来就快一些。直接把B+树整体拿到内存里面查找。&lt;br&gt;&lt;br&gt;分析出来会走索引，数据库就一定会走索引吗？&lt;br&gt;其实不然，数据库自己还有优化，万一数据库觉得走全表扫描比走索引还快的话，就不会走索引了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="44" y="580" width="776" height="270" as="geometry" />
        </mxCell>
        <mxCell id="PFGi73NgZuRSLPyA7w7K-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;索引是什么？&lt;br&gt;&lt;br&gt;牢记索引是一种排好序的数据结构！且B+数的索引叶子结点包含了全部数据信息（二级索引除外）。&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="40" y="-120" width="740" height="150" as="geometry" />
        </mxCell>
        <mxCell id="PFGi73NgZuRSLPyA7w7K-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;其实所有的优化原则的原理，根据下面这句宗旨去进行分析就很好理解：就记住B+树索引是排好序的数据结构，并且叶子节点包含了所有列的数据（二级索引存的是主键信息，会进行回表查询）。&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;比如：最左匹配，不能给索引列加函数方法，like的百分号要在右边。&lt;br&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;怎么分析呢？&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;最左匹配：因为索引是排好序的，比如 联合索引 name,age 。索引的排序是先按照name进行排序，如果name有相同的，再根据age进行排序。那如果你的where条件是age在前面，那怎么能找得到呢。&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="30" y="900" width="830" height="170" as="geometry" />
        </mxCell>
        <mxCell id="r750OqilGSKwBD_I3ron-2" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;索引下推是什么？&lt;br&gt;&lt;br&gt;mysql什么情况下回用到索引下推呢？&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="900" y="910" width="830" height="170" as="geometry" />
        </mxCell>
        <mxCell id="r750OqilGSKwBD_I3ron-3" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;一条sql是如何在mysql中执行的呢？&lt;br&gt;&lt;br&gt;mysql有哪些角色？&lt;br&gt;&lt;br&gt;词法分析器有哪些步骤？&lt;br&gt;&lt;br&gt;语法分析生成一个语法树，这个东西有什么意义，能使用在哪些方面呢？&lt;br&gt;分库分表：java有类库可以支持生成语法树，然后我们可以根据这个树，来判断走哪个库哪个表。&lt;br&gt;分布式事务回滚：&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="30" y="1310" width="840" height="240" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
