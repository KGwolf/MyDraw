<mxfile host="app.diagrams.net" modified="2023-11-27T02:22:32.822Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36" etag="RqwLm0IXj_21pKmSlb-i" version="22.1.4" type="github">
  <diagram name="第 1 页" id="Ui-6xDZG4yXv-m0ysYRE">
    <mxGraphModel dx="1434" dy="758" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="iayUrk5L2lRTLvckCghS-1" value="redis有几种存储形式？底层存储是怎样的数据结构？&lt;br&gt;&lt;br&gt;redis为什么快？单线程为什么快？为什么设计成单线程呢？&lt;br&gt;&lt;br&gt;redis的架构模型" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="100" y="160" width="720" height="160" as="geometry" />
        </mxCell>
        <mxCell id="iayUrk5L2lRTLvckCghS-2" value="redis的持久化有哪些？&lt;br&gt;&lt;br&gt;rdb和aof的优缺点有哪些？&lt;br&gt;&lt;br&gt;混合模式是怎样操作的呢（具体的流程）？&lt;br&gt;&lt;br&gt;redis什么时候用到了写时复制的原理？（主从复制的时候？cluster模式下增加节点的时候？）" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="100" y="380" width="790" height="170" as="geometry" />
        </mxCell>
        <mxCell id="iayUrk5L2lRTLvckCghS-3" value="redis的高可用有哪些方式呢？（主从、哨兵、cluster集群）&lt;br&gt;&lt;br&gt;redis是往分布式的哪方面进行设计的CAP中的AP？&lt;br&gt;&lt;br&gt;主从需要几个节点呢？这个节点数量貌似没有要求，至少得有1个从节点吧？&lt;br&gt;&lt;br&gt;主从的数据是怎么同步的呢？如何保证主从数据同步不会出现丢失数据的情况？&lt;br&gt;&lt;br&gt;如果只有主从，那么主节点挂掉了之后，是需要手动找一个从节点来升级成主节点？那期间的程序访问redis就不可用了？&lt;br&gt;&lt;br&gt;那么就加哨兵来保证自动故障转移？哨兵是怎么一个运作模式呢？哨兵节点的数量有没有要求呢？哨兵的作用是在出现故障时候，进行自动选主？那么涉及到选主，就建议节点的数量是奇数个，但是也不一定。你要偶数个也没问题，2个、3个、4个都行？反正要超过半数以上的节点选举成功才行。&lt;br&gt;哨兵自己也是主备架构，它自己也有单点故障的风险，那么一旦挂掉一个，也需要进行选主的操作。&lt;br&gt;&lt;br&gt;哨兵选举的过程流程是怎样的呢？节点间的通信机制是怎样的呢？socket？使用了哪些协议？gossp？不管是哨兵还是cluster，节点之间是不是都需要有心跳机制？&lt;br&gt;&lt;br&gt;当主从出现故障的时候，这时候，" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="100" y="610" width="1080" height="430" as="geometry" />
        </mxCell>
        <mxCell id="iayUrk5L2lRTLvckCghS-4" value="redis的缓存淘汰策略有哪些？LRU算法是什么？操作系统是不是也有一个LRU算法？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="1000" y="380" width="720" height="160" as="geometry" />
        </mxCell>
        <mxCell id="iayUrk5L2lRTLvckCghS-5" value="cluster集群模式，&lt;br&gt;&lt;br&gt;cluster模式建议最多不超过多少个主备集群呢？可能是因为集群之间是需要进行通信的，太多节点，通信压力也大。&lt;br&gt;&lt;br&gt;cluster模式，建议使用奇数个主节点（主备集群）？不是必须使用奇数个节点，因为只需要半数以上就行了，4个挂一个需要2个节点选举同一个slave节点，3个也是一样，这样奇数可以少用一个节点，当然，多一个节点可以分担一下整个集群的压力。&lt;br&gt;&lt;br&gt;节点间的通信是怎么样的？当某一个主节点发生宕机的情况，如何发起重新选举的操作呢？大概有一套流程，slave节点都会发消息给大集群内的所有节点，只有其它的主节点会返回消息，且只会返回收到的第一个消息，这样slave节点就可以在收到返回消息之后进行计数，超过一般直接自己升级为master。&lt;br&gt;&lt;br&gt;那集群发生脑裂是什么情况？脑裂会导致什么问题呢？（当主节点跟集群内所有的节点都不能通信了，但是能够跟客户端进行通信，这时候slave节点会进行选主操作重新又来一个主节点，这样某一个节点上就有2个主节点，就叫做脑裂，这时候客户端继续跟老的主节点通信操作数据，一旦老节点恢复网络通信，这时候发现集群里面已经有一个主节点了，那么这个老节点就自动成为slave，重要的是，根据主备数据同步原理，节点新加入集群，就需要进行数据全量同步，这时候，就会把老节点跟客户端在脑裂期间的数据都覆盖掉，对用户来说就少了数据&lt;br&gt;！！！），&amp;nbsp; 怎么应对脑裂呢？&lt;br&gt;&lt;br&gt;当进行节点增加时候，只需要执行一行语句，就可以增加一个节点，但是还需要进行槽位的分配，和数据的迁移，那么迁移和客户端操作会不会有冲突呢？这时候redis会进行阻塞等待吗？我猜测应该不会，可能会用到写时复制的原理？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="93.5" y="1100" width="1126.5" height="460" as="geometry" />
        </mxCell>
        <mxCell id="iayUrk5L2lRTLvckCghS-6" value="分布式锁&lt;br&gt;&lt;br&gt;为什么需要分布式锁？&lt;br&gt;&lt;br&gt;分布式锁的实现方式（redis、zookepper、数据库）&lt;br&gt;&lt;br&gt;redis实现分布式锁的方式：setnx、redisson（框架）&lt;br&gt;&lt;br&gt;其中如果用setnx，需要自己处理很多的复杂情况：代码原子性、释放锁的时机问题、超时时间设置的长短。&lt;br&gt;&lt;br&gt;那么redission很好的封装了这些复杂的逻辑。包括锁的续期。&lt;br&gt;&lt;br&gt;当并发抢锁时候，redisson用lua脚本来执行原子性的命令，redis执行命令也是单线程执行的，所以，只会有1个线程能够抢到锁，相当于我们自己写程序用的setnx。 锁的过期时间默认30s，抢完锁就继续执行业务逻辑，这时候后台会用方法递归的方式来进行锁的续期，默认30/3=10s钟一次。其它等待的线程就会进入" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="93.5" y="1580" width="930" height="330" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
