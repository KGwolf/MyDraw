<mxfile host="app.diagrams.net" modified="2023-03-20T14:08:59.661Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.139 Safari/537.36" etag="3G7vnmpUHfsUkuZIbmOg" version="20.6.0" type="github">
  <diagram name="第 1 页" id="j0T0W_XY4i96COsHRtta">
    <mxGraphModel dx="1426" dy="772" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="BxTBeL077zcQ3UxvTALr-2" value="&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;# Spring&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;核心就是refresh方法&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;1.prepareRefresh：给上下文赋一些初始值。做准备工作。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;2.obtainFreshBeanFactory：创建一个DefaultListableBeanFactory。加载BeanDefinition，其中loadBeanDefinitions()，有很多重载，直到doLoadBeanDefinitions()，加载配置文件，registerBeanDefinitions()，再doRegisterBeanDefinitions()，再parseBeanDefinitions()，这里2个分支，parseDefaultElement()，parseCustomElement()，一个是默认标签，一个是自定义标签。最终是给2个地方赋值：beanDefinitionMap（一个Map集合），beanDefinitionNames（一个存放名字的集合）。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px; border-color: var(--border-color);&quot;&gt;其中parseCustomElement()，除了进行自己定义的标签会处理，如果还有&amp;lt;compent-scan&amp;gt;标签，进行处理：parseCustomElement()，通过&lt;/font&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;scanner.doScan(包路径),，先根据路径找到路径下面的所有文件（类文件），然后看看是否有对应的注解（@Component，@Service等），找到则加入BeanDefinitionMap和name。同时调用&lt;/span&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;registerComponents()方法，进行&lt;/font&gt;&lt;/span&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;组件注册（包括注册一些内部的注解后置处理器，触发注册事件）：&lt;/font&gt;ConfigurationClassPostProcessor、AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等，同时将这几个一起加入到BeanDefinitionMap中。&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;3.&lt;/span&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;prepareBeanFactory：给BeanFactory赋一些初始值&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;4.postProcessBeanFactory：可以注册一些特殊的BeanPostProcessors,默认没有实现，丢给子类去进行扩展，比如Spring Mvc。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;5.invokeBeanFactoryPostProcessors：调用各种的BFPP。主要是在BeanDefinationMap 中查找有没有BeanDefinitionRegistryPostProcessor类型的BeanName,很显然，&lt;/font&gt;&lt;/div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;ConfigurationClassPostProcessor是继承自&lt;/span&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;BeanDefinitionRegistryPostProcessor的，所以可以找到，同时，将找到的这些beanname，进行对象创建！！！！&lt;/span&gt;&lt;br&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;3.如果是纯注解的方式，流程是怎么走的呢？怎么查找beandefinition的信息？look-up标签的效果如何用注解的方式来实现？&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="120" y="510" width="1060" height="970" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
