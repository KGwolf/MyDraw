<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36" version="24.9.0">
  <diagram name="第 1 页" id="j0T0W_XY4i96COsHRtta">
    <mxGraphModel dx="3341" dy="3216" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="ogtzRiGRsrbSHcqAZTL8-2" value="命令行参数的设置优先级 &amp;gt; VM 参数设置 &amp;gt; 操作系统参数设置&lt;div&gt;注意：图中的操作系统设置有问题：SERVER_PORT=9003&amp;nbsp;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=15;fontStyle=1;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-750" y="4160" width="780" height="520" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-20" value="&lt;div&gt;&lt;div&gt;@Value、@Order底层用到的一些类：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;@Value可能涉及到类型转换：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@Value(&quot;xht&quot;)&amp;nbsp; private User user;&amp;nbsp; &amp;nbsp;这是想要把字符串xht转换成User类，不做处理的话，是转换不了的。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.PropertyEditor：JDK中的类型转换工具类&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.ConversionService：Spring中提供的类型转换服务&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.TypeConvert：整合了PropertyEditor和ConversionService的功能，是Spring内部用的。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;OrderCompare、AnnotationAwareOrderCompare：Spring提供的比较器，可以根据Ordered接口或@Order注解来实现排序。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;MetaDataReader、ClassMetaData、AnnotationMetaData&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;底层是ASM：扫描包不需要加载所有的类到JVM，可以实现按需加载类的效果&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ASM是一个字节码操作和分析框架。 通过对字节码的分析来生成元数据信息。比反射效率高得多。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;元数据跟反射对比，还有其他的优势：更高级别的抽象。 还可以对xml配置等生成元数据信息。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;跟BeanDefinition的区别：BD最重要的就是读取类的注解信息。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;跟反射的区别：反射没有这么方便吧。&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;hasAnnotation方法和hasMetaAnnotation方法的区别：能否找到注解里面的注解区别&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;ExcludeFilter、IncludeFilter：Spring扫描过程中用来过滤bean的&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;@Component，Spring底层就是使用includeFilter来支持的&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;FactoryBean&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;会有2个Bean，getBean，传&quot;user&quot;会取到getObject方法new的对象（不会放到单例池，会放到另外的cache里面），“&amp;amp;user”会取到另外的bean。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;跟@Bean的方式有什么区别呢：都可以自己去new对象，但是FactoryBean new出来的对象不会经过Spring的生命周期，不会经历BPP的那些方法（初始化后的方法需要用到，aop使用）。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="3860" y="-400" width="1060" height="770" as="geometry" />
        </mxCell>
        <mxCell id="wJDUlHO4tCs9Kh0-4UFC-3" value="&lt;b&gt;loadBeanDefinition方法重要的地方&lt;/b&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=23;" parent="1" vertex="1">
          <mxGeometry x="1471" y="1410" width="419" height="20" as="geometry" />
        </mxCell>
        <mxCell id="dgufYrilfiPxplGniSbw-1" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;b&gt;学习工作流&lt;br&gt;Activity工作流引擎&lt;br&gt;&lt;/b&gt;&lt;/font&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="330" y="120" width="340" height="90" as="geometry" />
        </mxCell>
        <mxCell id="pG0QJ9Zps9Mg5KZsHf64-1" value="如果我们自己实现一个spring mini，需要做哪些功能，需要注意哪些事项呢？&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring的事件是怎么处理的？只有同步事件吗？可否异步实现？&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="640" y="-2220" width="780" height="250" as="geometry" />
        </mxCell>
        <mxCell id="fp51QhKkukz8XwMPk-Mx-2" value="Aware接口是干嘛用的？&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Aware回调，指在spring内部发现bean实现了Aware接口，会回调对应的方法。&lt;br&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过实现Aware接口，Bean能够获取到Spring容器提供的一些资源或者对容器的一些操作。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;ApplicationContextAware：允许Bean访问Spring应用程序上下文，从而可以获取其他Bean的引用或者执行一些上下文相关的操作。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BeanFactoryAware：允许Bean访问Spring的Bean工厂，从而可以获取其他Bean的引用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;BeanNameAware：允许Bean获取其在Spring容器中的名称。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EnvironmentAware：允许Bean访问Spring的Environment对象，从而可以获取配置属性。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ResourceLoaderAware：允许Bean访问Spring的资源加载器，从而可以加载外部资源。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;MessageSourceAware：允许Bean访问Spring的消息源，从而可以获取国际化的消息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ServletContextAware：允许Bean访问Servlet容器的上下文，通常用于在Web应用中获取ServletContext对象。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1700" y="-2280" width="1210" height="380" as="geometry" />
        </mxCell>
        <mxCell id="M39qVLBIAdEOk3E70RZc-1" value="Spring创建类，是先初始化还是先实例化？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1650" y="-1790" width="1210" height="380" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-1" value="&lt;div&gt;Spring的一些核心概念、类：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;BeanDefinition是什么？&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;定义了Bean的一些属性：class表示bean的类型，scope表示bean的作用域（单例或者原型），lazyinit表示是否懒加载，等等。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;定义bean的方式：&lt;br&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;声明式定义Bean：@Bean、@Component（@Service、@Controller）。这些会被Spring框架解析为对应的BeanDefinition对象，并放入Spring容器中&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;编程式定义Bean：通过代码，生成1个BeanDefinition对象，并注册到ApplicationContext中，然后再赋值属性（scope、lazyinit等）。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;BeanDefinitionReader：BeanDefinition读取器，Spring源码内部使用很多。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AnnotatedBeanDefinitionReader：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;构造&lt;/span&gt;方法传入AnnotationConfigApplicationContext，再调用register方法，Bean就注册成功了。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;读取出来的类型是AnnotatedGenericBeanDefinition&amp;nbsp; 继承了&amp;nbsp; GenericBeanDefinition&amp;nbsp; 继承了 AbstractBeanDefinition 实现了BeanDefinition接口。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;XmlBeanDefinitionReder：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;构造方法传入AnnotationConfigApplicationContext，再调用loadBeanDefinition方法传入xml文件名字来注册Bean。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ClassPathBeanDefinitionScanner：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;构造方法传入AnnotationConfigApplicationContext，再调用scan方法传入包名路径。会扫描这个路径下面的Bean。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;读取出来的类型是ScannedGenericBeanDefinition&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;继承了&amp;nbsp; GenericBeanDefinition&amp;nbsp; 继承了 AbstractBeanDefinition 实现了BeanDefinition接口。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="700" y="-360" width="930" height="620" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-17" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="GvqGTiElUNmYjcPFba12-4" target="GvqGTiElUNmYjcPFba12-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-4" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;BeanDefinition&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2130.25" y="-420" width="194.5" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-14" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="GvqGTiElUNmYjcPFba12-5" target="GvqGTiElUNmYjcPFba12-6" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="GvqGTiElUNmYjcPFba12-5" target="GvqGTiElUNmYjcPFba12-8" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-16" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="GvqGTiElUNmYjcPFba12-5" target="GvqGTiElUNmYjcPFba12-7" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="2230" y="-210" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-5" value="AbstrctBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2105" y="-300" width="245" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-6" value="RootBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1820" y="-170" width="245" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-7" value="ChildBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2380" y="-170" width="245" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="GvqGTiElUNmYjcPFba12-8" target="GvqGTiElUNmYjcPFba12-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-13" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="GvqGTiElUNmYjcPFba12-8" target="GvqGTiElUNmYjcPFba12-11" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-8" value="GenericBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2105" y="-170" width="245" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-9" value="ScannedGenericBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1890" y="-30" width="290" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-11" value="AnnotatedGenericBeanDefinition" style="html=1;whiteSpace=wrap;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2242.5" y="-30" width="317.5" height="70" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-18" value="ChildBeanDefinition已经被废弃了。&lt;div&gt;RootBeanDefinition是跟BeanDefinition合并相关的类。&lt;/div&gt;&lt;div&gt;GenericBeanDefinition是用的最多的一种类型。&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1960" y="70" width="660" height="80" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-19" value="&lt;div&gt;BeanFactory：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;接口，提供了获取Bean的一种能力。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ApplicationContext 接口实现了 ListableBeanFactory 接口&amp;nbsp; 实现了 BeanFactory接口。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;DefualtListableBeanFactory 是BeanFactory的一个非常重要的实现类，集成了很多的功能。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AliasRegistry接口：别名注册功能，代表1个Bean可以有多个名称。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;HierarchicalBeanFactory 提供了可继承的BeanFactory，Spring MVC中使用到？&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ListableBeanFactory 提供了展示BeanFactory的内部信息，比如 beanName集合等。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;ApplicationContext：除了BeanFactory的能力之外，还有很多额外的能力。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AnnotationConfigApplicationContext：注解的ApplicationContext。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ClassPathXmlApplicationContext：XML文件的ApplicationContext。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;国际化功能：实现了MessageSource接口，可以实现国际化的需求效果：@Bean注册一个MessageSource类到ApplicationContext，用的时候，context.getMessage来得到。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;加载资源功能：context.getResource方法，&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;获取运行时环境参数：context.getEnviroment().getSystemProperty(&quot;aa&quot;)，还可以@PropertySource(&quot;&quot;)。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;事件发布功能：@Bean注册一个AppliactionListener类到context，然后发布的时候context.pulishEvent(&quot;s&quot;)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="2800" y="-380" width="930" height="620" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-23" value="" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=data:image/png,;" parent="1" vertex="1">
          <mxGeometry x="5030" y="-1130" width="1644.43" height="512.31" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-24" value="" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=data:image/png,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;" parent="1" vertex="1">
          <mxGeometry x="3360.59" y="-1130" width="1549.41" height="658.5" as="geometry" />
        </mxCell>
        <mxCell id="GvqGTiElUNmYjcPFba12-25" value="Ioc首先就是要自动创建类，创建类，首先要知道哪些类需要被Ioc容器来创建，所以我们需要收集类的一些信息，这些信息被封装到BeanDefinition中。 后续需要创建类和处理类的时候，可以读取BeanDefinition信息进行处理。&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;接着创建类，是交给BeanFactory来进行创建的，并且提供获取bean的API。其中有一个非常重要的实现类：DefaultListableBeanFactory，类关系如右边图所示：&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;然后就是ApplicationContext，这是一个接口，也是BeanFactory的一种（new一个Appcontext，底层会创建一个BeanFactory），并且另外提供了很多的功能（通过实现接口），其中重要的一个实现类是AnnotationConfigApplicationContext，类关系如右边图所示：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;可以看出除了BeanFactory功能，还有环境变量、事件发布、资源获取、国际化消息 等功能。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="2040" y="-1080" width="890" height="370" as="geometry" />
        </mxCell>
        <mxCell id="YwkelIsdRXLL7gscizhT-1" value="如何实现扫描类生成BeanDefinition的：&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigApplicationContext构造方法（String... basePackages）----》AnnotationConfigApplicationContext#scan()----》ClassPathBeanDefinitionScanner#scan()----》ClassPathBeanDefinitionScanner#doScan()：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.ClassPathScanningCandidateComponentProvider#findCandidateComponents()----》ClassPathScanningCandidateComponentProvider#scanCandidateComponents()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathScanningCandidateComponentProvider#isCandidateComponent()----》ClassPathScanningCandidateComponentProvider#isConditionMatch()---》ConditionEvaluator#shouldSkip()&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;isConditionMatch成功之后，生成一个&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ScannedGenericBeanDefinition类，构造方法里面设置了beanClass为当前类的名字，后续操作才存的是类的Class对象（在实例化之后吧应该）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;generateBeanName-----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationBeanNameGenerator#generateBeanName()：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationBeanNameGenerator#determineBeanNameFromAnnotation()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationBeanNameGenerator#isStereotypeWithNameValue() 这里会找Compnent注解的value属性，来当做beanName。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationBeanNameGenerator#buildDefaultBeanName()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Introspector#decapitalize() 当没有Component的value时，生成一个默认的beanName：MyClass对应myClass，MYClass 对应 MYClass。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathBeanDefinitionScanner#postProcessBeanDefinition() ----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanDefinition#applyDefaults() 给beanDefinition设置默认值。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigUtils#processCommonDefinitionAnnotations() 处理beans上的一些注解：@Lazy、@DependsOn、@Role、@Description，给beanDefinition对应的这些属性赋值。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathBeanDefinitionScanner#checkCandidate()&amp;nbsp; &amp;nbsp;这个是检查有无重复的BeanDefinition，如果只是beanName一样，BeanDefinition实例不一样，就会抛出异常（xxx conflicts with existing）。 如果是重复扫描到一个bean，返回不通过，不进行注册就行。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathBeanDefinitionScanner#registerBeanDefinition()----》BeanDefinitionReaderUtils#registerBeanDefinition()----》DefaultListableBeanFactory#registerBeanDefinition()----》DefaultListableBeanFactory#beanDefinitionMap&amp;nbsp; 和 DefaultListableBeanFactory#beanDefinitionNames 进行put操作。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BeanDefinitionReaderUtils#registerBeanDefinition() 里面其实调用的是&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BeanDefinitionRegistry#registerBeanDefinition() ，是一个接口，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory 类实现了这个接口，这个类是在&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigApplicationContext&amp;nbsp; 的父类&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;GenericApplicationContext的构造方法里面就new出来了的。 那为什么不直接用这个&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;？而用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BeanDefinitionRegistry呢？ 因为这里只是用来做解析得到beanDefinition，所以没必要用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;，这里面的功能还有很多。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;BeanDefinitio不只是用来实例化对象用的，还有初始化前后、属性注入 等操作会用到！！！！&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="280" y="651" width="1630" height="710" as="geometry" />
        </mxCell>
        <mxCell id="UheaUjV01zv5PhRMcysD-1" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory#preInstantiateSingletons()：得到beanDefinition集合后，进行实例化bean&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanFactory#getMergedLocalBeanDefinition()----》AbstractBeanFactory#getMergedBeanDefinition()&amp;nbsp; 进行合并BeanDefinition，传入beanName，得到一个RootBeanDefinition，并且放到&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;mergedBeanDefinitions&amp;nbsp; map 里面去。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;注意：扫描生成的BeanDefinition是放到beanDefinitionMap里面的，这是基础的BeanDefinition，这里面还有一些没有解析的属性（涉及到关联其它的bean）。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;合并生成的BeanDefinition，已经是完整的BeanDefinition了，可以拿来进行直接创建bean。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;合并的过程：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;new RootBeanDefinition(bd)，传入beanDefinition后生成一个RootBeanDefinition：如果没有parent属性，直接new，如果有，则递归进行父bean合并，每个父bean都会new一个新的RootBeanDefinition，并且&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;mbd.overrideFrom(bd);&amp;nbsp; 这个是用来把父bean的属性覆盖到合并的里面去&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;。然后加入到&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;mergedBeanDefinitions&amp;nbsp; map 里面去。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里为什么呢？当xml配置parent属性，当parent是原型时，这里合并了之后，子bean也变成原型了。&amp;nbsp; 当子bean没有设置一些属性，而父bean设置了属性，就会继承父bean的属性。 如果子bean设置了，就还是用子bean自己的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.FactoryBean的处理：生成beanDefinition的时候，是不会对FactoryBean进行任何处理的，就只是把它当做一个普通的Bean。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AbstractBeanFactory#isFactoryBean()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory#getBean(FACTORY_BEAN_PREFIX + beanName);----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;AbstractBeanFactory#doGetBean()&lt;/font&gt;：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;transformedBeanName()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BeanFactoryUtils#transformedBeanName()&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;：当传入&amp;amp;开头的beanName，说明是获取FactoryBean的本身bean，但是会把前面的N个&amp;amp;符号进行删除。说明放到单例池的FactoryBean的beanName就是没有&amp;amp;符号的，跟存到&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;factoryBeanObjectCache 池里面的beanName是一样的。 同时，这个方法还能进行别名的转换：解析的时候，别名存到一个单独的aliasMap里面，这里会把别名换成正式名。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultSingletonBeanRegistry#getSingleton()：从单例池（三级缓存）中找bean。如果没找到，则调用此方法的重载方法&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getSingleton(String beanName, ObjectFactory&amp;lt;?&amp;gt; singletonFactory)，调用委托进行创建对象实例。（&lt;font color=&quot;#ff0000&quot;&gt;FactoryBean的本身bean就是调用这个委托创建&lt;/font&gt;），然后调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getObjectForBeanInstance() 返回对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getObjectForBeanInstance()：&amp;nbsp; &lt;font color=&quot;#ff0000&quot;&gt;主要是处理FactoryBean的逻辑，不然直接返回就可以。&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BeanFactoryUtils#isFactoryDereference()：判断传入原始beanName是不是&amp;amp;开头的，如果是，给 beandefinition 赋值 isFactoryBean， 就返回传入的实例对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;判断传入的实例是否是FactoryBean，如果不是，也直接返回传入的实例对象。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;FactoryBeanRegistrySupport#getObjectFromFactoryBean()----》&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;FactoryBeanRegistrySupport#doGetObjectFromFactoryBean()&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;：如果是FactoryBean，且单例池里面有这个beanName了，就调用&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;FactoryBean.getObject()&amp;nbsp; 进行获取 我们自行new的对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;new出来了我们自己的对象后，还会执行&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessObjectFromFactoryBean() 方法进行bean的后置处理，调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyBeanPostProcessorsAfterInitialization() ----》BeanPostProcessor#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessAfterInitialization() 进行Bean的初始化后进行处理，这里跟docreateBean的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation() 方法一样。&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;当代码调用appCpontext.getBean()的时候，也是调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanFactory#doGetBean() 。只是getSingleton的时候会找到值，传入普通的beanName&amp;nbsp; 或者&amp;nbsp; &amp;amp;beanName，会直接返回对象。&amp;nbsp; 传入不带&amp;amp; 的factoryBean的时候，会进行调用getObject方法进行创建自己的new对象。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;注意：当实现了SmartFactoryBean接口的时候，会在创建BeanFactory本身bean的时候，同时调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getObject方法进行创建自己的new对象。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;smartSingleton#afterSingletonsInstantiated()：在所有单例bean都创建完成后，循环判断是否实现&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;SmartInitializingSingleton接口，实现了就执行&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;afterSingletonsInstantiated方法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;这里还没有对doCreteBean进行剖解。&lt;/font&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="2280" y="480" width="1810" height="1091" as="geometry" />
        </mxCell>
        <mxCell id="D0tMUq0APOCBl6L36fft-1" value="&lt;div&gt;BeanDefinition 和 ParentBeanDefinition&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;BeanFactory 和&amp;nbsp; ParentBeanFactory（Spring boot中会使用到）&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;new多个AnnotationConfigApplicationContext ，指定不同的扫描类，同时设置context.setParent，这样，子context.getBean，找不到的话，会去父context里面找。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="3890" y="1684" width="1020" height="140" as="geometry" />
        </mxCell>
        <mxCell id="bwJsfqsvKPsk8CTJIlO6-3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=1;entryDx=0;entryDy=0;" parent="1" source="bwJsfqsvKPsk8CTJIlO6-2" target="UheaUjV01zv5PhRMcysD-1" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bwJsfqsvKPsk8CTJIlO6-2" value="&lt;div&gt;阶段总结：&lt;/div&gt;&lt;div&gt;ioc开始扫描的时候，每个类会生成1个beanDefinition，存到一个map里面。后面准备创建类的时候，循环这些beanDefinition集合，对每个beanDefinition进行合并生成RootBeanDefinition，存到一个新的map里面。创建类是根据这个合并后的RootBeanDefinition来进行创建的。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;FactoryBean的处理：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过合并后的RootBeanDefinition会创建一个FactoryBean实现类的实例。存到单例池里面。如果实现了SmartFactoryBean接口，会在这个时候&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;调用getObject方法，来new我们的对象。不用等到我们手动getBean的时候创建了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过&amp;amp;开头的beanName会获取到FactoryBean实现类的实例。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过getBean调用非&amp;amp;开头的beanName，会调用getObject方法，来new我们的对象。并放到一个单独的单例池里面去。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="2640" y="1661" width="1080" height="240" as="geometry" />
        </mxCell>
        <mxCell id="bwJsfqsvKPsk8CTJIlO6-4" value="Spring 到底是怎么创建bean的：&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition()DefaultListableBeanFactory#getBean()----》AbstractBeanFactory#doGetBean()----》AbstractAutowireCapableBeanFactory#createBean()----》AbstractAutowireCapableBeanFactory#doCreateBean()&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先，doGetBean：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.处理别名和factoryBean的beanName。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.getBean的是FatoryBean的真正的bean，getObjectForBeanInstance方法会进行处理返回。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.dependson处理依赖的bean。先生成依赖的bean。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;单例：getSingleton()---createBean()&amp;nbsp; &amp;nbsp;单例池有就不创建&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;原型：每次都createBean()&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;其它：比如Spring mvc会用到session、request作用域，实例对象都是存储到对应请求或者session的Attribute属性里面的。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;其次，createBean：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.根据beanDefinition来解析BeanClass：类加载器加载后得到。&amp;nbsp; 并设置到&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanDefinition#beanClass 属性上，这个值之前是string类型的beanName。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractBeanDefinition#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;prepareMethodOverrides()&amp;nbsp; 处理lookup注解。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation()&amp;nbsp; &amp;nbsp;处理对象实例化前的方法：判断是否存在实现&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor 接口，调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation() 方法，&lt;font color=&quot;#ff0000&quot;&gt;在这个方法里面，可以自己new对象了，createBean就直接返回这个对象&lt;/font&gt;。这里如果自己实例化了一个对象，那么后续还会执行初始化后的方法，这里跟AOP有关系的。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;然后，doCreateBean：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;createBeanInstance()：根据推断构造方法来实例化对象。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyMergedBeanDefinitionPostProcessors()：&lt;font color=&quot;#ff0000&quot;&gt;提供一个扩展，实例化之后继续能修改beanDefinition。&lt;/font&gt;判断是否存在实现&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MergedBeanDefinitionPostProcessor 接口，调用其&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessMergedBeanDefinition 方法来合并beanDefinition。这里为什么还要修改beanDefinition呢？哪些场景会用到？&lt;font color=&quot;#ff0000&quot;&gt;可以用于给属性注入特殊的对象：&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;beanDefinition.getPropertyValues().add(&quot;orderService&quot;, new OrderService());&amp;nbsp; 同时，还会根据spring 内部的类&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;（&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;，来执行这个方法找到依赖注入点（@Autowire、@Value、@Resource）&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#populateBean()：填充bean属性。以前是通过&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor#postProcessPropertyValues() 方法来实现填充bean属性。现在这个方法&lt;font color=&quot;#ff0000&quot;&gt;被舍弃了&lt;/font&gt;，用populateBean替代。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 首先，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation()，找到实现了这个接口的类，执行此方法，&lt;font color=&quot;#ff0000&quot;&gt;这个方法是在实例化之后，填充属性之前进行的。默认返回true，代表要继续执行填充属性逻辑。还可以实现一些定制化的逻辑，比如在这个方法里去手动赋值属性注入，可以返回false，直接跳过后续的填充属性&lt;/font&gt;。这个点spring源码里很少使用。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 其次，找到所有的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;PropertyValue值：上步的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessMergedBeanDefinition&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;、xml设置的autowirebytype等。赋值给一个变量pvs。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 然后，找到实现了&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor接口的类（&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），执行它们的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessProperties()方法，inject方法传入pvs参数，这里传入pvs不是注入用的，而是去判断是否在这一步跳过注入，很奇怪只有方法注入（AutowireMethodElement#inject）里面有这个判断，属性注入里面没有这个判断。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里为什么要跳过：pvs可能被我们自定义了，比如&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessMergedBeanDefinition&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;方法里面。这时候就需要用我们手动设置的值来进行注入。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 执行&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessProperties 方法：里面是处理@Autowire、@Vaule、@Resource的注入处理。同时有@Lazy的处理。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="4350" y="640" width="1820" height="931" as="geometry" />
        </mxCell>
        <mxCell id="O9nBJEy2ve5Ui2WGgwvP-1" value="什么是Bean的声明周期：&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Bean从生成到销毁的全过程。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="290" y="344" width="1080" height="136" as="geometry" />
        </mxCell>
        <mxCell id="D6fcGdb9X7AAliOLWOz7-1" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;依赖注入：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.手动注入：xml里面实现。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;set方法注入、构造方法注入。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.自动注入：xml的autowire属性（需要有set方法），@AutoWire注解（平替xml的autowire属性，但是有更细粒度控制）。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;@Bean(autowire=Autowire.BY_NAME)&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;很少用by_name、by_type。默认的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;private int autowireMode = AUTOWIRE_NO; 既不是by_name ，也不是by_type&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;PropertyDescriptor：这是java bean里面的概念，表示一个private 属性，并且有 set get方法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Autowire、@Value、@Resource，是在什么时候进行处理的？ populateBean方法里面，找到实现&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor接口的类，调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessProperties方法处理自动注入&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor（处理@Autowire、@Value），&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor（处理@Resource）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;在哪里进行注入的？在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessProperties方法里面进行注入的。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;SmartInstantiationAwareBeanPostProcessor 继承自&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor，提供了额外的方法功能：推断构造方法，循环依赖等。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Autowire、@Value、@Resource的注入点是怎么找到的，在哪一步找的？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyMergedBeanDefinitionPostProcessors()&amp;nbsp; 在实例化前的这一步，除了可以自定义一个类实现修改beanDefinition之外，还调用了spring框架里面自带的2个类里面的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessMergedBeanDefinition 方法（&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），这2个类里面在这里去&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findAutowiringMetadata 找@Autowire、@Value的元数据信息。&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findResourceMetadata 找@Respurce元数据信息。（遍历类的属性和方法）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;static属性不会被当做注入点。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;我们在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyMergedBeanDefinitionPostProcessors自定义类实现修改beanDefinition的PropertyValues，给某个类的属性直接赋值。跟在属性上&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Autowire&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;的值相比，最后用的是哪个，先后顺序是怎样的？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;修改beanDefinition的PropertyValues会 在populateBean方法的最后面才执行赋值操作。而@Autowire是在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessProperties方法里面进行注入的。所以，先执行@Autowire，然后再执行pvs，最终会用我们自己new出来的类赋值给属性。&lt;/span&gt;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Autowire写在方法上，不管方法名称是什么都能成功，因为取的是参数名称来进行注入的。&amp;nbsp; &amp;nbsp;&lt;font color=&quot;#ff0000&quot;&gt;而用自动手动加的pvs来进行注入，必须要有set方法才行&lt;/font&gt;，会找set开头的后面的字符串才是注入的属性。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;需要set方法才能注入的情景：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.xml里面写&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;property标签。&amp;nbsp; 2.通过修改beanDefinition的pvs。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="6270" y="640" width="1820" height="931" as="geometry" />
        </mxCell>
        <mxCell id="Ga1AF2tgOWOmU4xiCG-G-1" value="&lt;div&gt;@Autowire、@Value、@Qulifier、@Lazy、@Resource&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@Lzay可以写在类、方法、方法参数上面。跟循环依赖也有关系&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;在填充属性进行注入处理的时候，找到实现了&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InstantiationAwareBeanPostProcessor接口的类（&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），执行它们的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;postProcessProperties()方法&lt;/font&gt;： 先找注入点，再进行注入。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先，都是找注入点：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor：调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findAutowiringMetadata 方法去找注入点。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;字段注入，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;buildAutowiringMetadata 方法里面&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;每个字段都会生成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredFieldElement 节点。 注入的时候调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredFieldElement#inject方法。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;方法注入，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;buildAutowiringMetadata 方法里面&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;每个方法都会生成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredMethodElement 节点，注入的时候调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredMethodElement#inject 方法。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor：调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findResourceMetadata 方法去找注入点。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;buildResourceMetadata 方法里面，不管字段还是方法，都会生成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ResourceElement 节点。但是这个类里面没有inject方法，找父类，一直找到&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InjectedElement#inject 方法进行注入。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;其次，进行注入：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@Autowire是怎么进行自动注入的：其中&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredAnnotationBeanPostProcessor：里面有2个内部类：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AutowiredFieldElement#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;inject()来处理字段的注入：调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.resolveDependency() 方法，传入字段信息，找到对象（调用的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.doResolveDependency()&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;）。这里没有check检查，很奇怪。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;如果发现有@Lazy注解，那么会生成一个代理对象直接返回，不会在beanfactory里面去找对象。等真正调用对象的方法执行时，才会调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.doResolveDependency()。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowiredMethodElement#inject()来处理方法的注入：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;checkPropertySkipping(pvs) 方法检查是否需要跳过，如果pvs里面有，就跳过。 然后对方法的每一个参数进行for循环，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.resolveDependency() 方法，传入方法参数信息，找到对象（调用的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.doResolveDependency()&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;）。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;如果发现有@Lazy注解，那么会生成一个代理对象直接返回，不会在beanfactory里面去找对象。等真正调用对象的方法执行时，才会调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.doResolveDependency()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@Resource是怎么进行自动注入的：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InjectedElement#inject：这里的字段也没有check检查。 方法有check检查。 然后都是调用&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InjectedElement#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getResourceToInject() 方法---&amp;gt;ResourceElement#&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getResourceToInject()，判断有没有@Lazy，如果有，返回代理对象。 没有@Lazy：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor#getResource()----&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CommonAnnotationBeanPostProcessor#autowireResource()&amp;nbsp; ：如果指定了name（@Resource(name=xxx)）或者&amp;nbsp; beanFactory找到了这个name对应的bean，那么就由beanFactory根据name找bean返回即可。如果 没有指定name 且 beanFactory里面没有找到这个name，那么就调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanFactory.doResolveDependency()方法，后续就跟@Autowire的逻辑一样了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;不管是@Resource 还是 @Autowired 注解，都可能会走下面的逻辑：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;beanFactory.doResolveDependency()方法&lt;/font&gt;： 在beanFactory里面去找到依赖注入需要的对象。 方法注入、字段注入都是走的这里。&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.&lt;font color=&quot;#ff0000&quot;&gt;解决@Value&lt;/font&gt;：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getAutowireCandidateResolver().getSuggestedValue(descriptor);方法拿到@Value里面的字符串的值。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;resolveEmbeddedValue() 方法 解析上一步拿到的字符串，解析占位符信息，从Enviroment里面去找对应的值。（这里spring cloud扩展了从配置中心拿数据？）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;evaluateBeanDefinitionString() 方法解析spring el表达式。看看能不能找到对象啥的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;最后，看看能不能自定义类型转换，转换为对应的值。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里如果@Value找到了值了，就直接返回进行反射赋值或调用方法。 不会进行下面的&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.找bean：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;resolveMultipleBeans()：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里面去判断了需要注入的类型，Array、List、Map等有不同的处理逻辑。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;比如属性类型是List&amp;lt;User&amp;gt;，这里会去找所有的User 的Bean，赋值给这个集合。Map&amp;lt;String,User&amp;gt;，这里String 是bean的名字。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;真正干活找bean的是&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory#findAutowireCandidates()&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findAutowireCandidates()：如果是普通的对象类型注入时。返回的是一个Map。（呼应了注入的时候先根据类型找多个bean，然后再根据属性名确认唯一一个）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; BeanFactoryUtils#beanNamesForTypeIncludingAncestors()：从beanfactory里面根据typename去找到所有的beanName。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 将&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;resolvableDependencies 中key为typename的对象加到集合中（结果集合）。这里的依赖来源：包括但不限于 spring启动的时候框架代码加了一些东西进去。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 将beanfactory中找到的所有beanName，进行遍历，判断是否能够被自动注入：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory#isAutowireCandidate()-----&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutowireCandidateResolver#isAutowireCandidate()：这里有3个实现类方法：（有点像责任链模式）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;SimpleAutowireCandidateResolver：找beanDefiniton上面的autowireCandidate属性，true表示通过筛选。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;gt; GenericTypeAwareAutowireCandidateResolver&lt;/span&gt;：继承上面的这个Simple类，先调用父类的筛选，如果不通过，则调用checkGenericTypeMatch方法进行判断 beanClass属性和type能不能对应上。（泛型会去找真正的类型），匹配上则通过。&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&amp;gt; QualifierAnnotationAutowireCandidateResolver&lt;/span&gt;：继承上面的这个Generic类，父类没通过筛选的话，则检查beanDefinition中的Qualifier属性是否和当前注入点的Qualifier属性匹配。匹配则通过筛选。&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;addCandidateEntry()----&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;resolveCandidate()----&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;beanFactory.getBean(beanName)&lt;/font&gt; （这里可能会引起循环依赖！！！！），getbean找到bean对象，填充到map里面，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findAutowireCandidates执行完成&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;如果通过上面额筛选还能找到多个对象，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultListableBeanFactory#determineAutowireCandidate()&amp;nbsp; 来确定到底用哪个： （&lt;font color=&quot;#ff0000&quot;&gt;比如依赖注入的类型是接口，这个接口有多个实现类&lt;/font&gt;）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 先找@Primary注解的对象返回。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 找优先级最高的对象。@&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Priority 注解的对象返回。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; 不满足上面2个，才根据属性名来找唯一的一个。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里bytype如果找到多个实现类，可不可以根据nacos配置来指定某一个类去实现注入？要怎么做呢？&lt;/font&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;找到值了之后，用反射进行属性赋值（属性注入），或者调用方法（方法上面的注入）。&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="8170" y="510" width="1860" height="1700" as="geometry" />
        </mxCell>
        <mxCell id="Jt1GNqRdVzweazGYFnvp-1" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;@Autowired注解可以写在：&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;1. 属性上：先根据属性类型去找Bean，如果找到多个再根据属性名确定一个&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;2. 构造方法上：先根据方法参数类型去找Bean，如果找到多个再根据参数名确定一个&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;3. set方法上：先根据方法参数类型去找Bean，如果找到多个再根据参数名确定一个&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="8320" y="330" width="1070" height="150" as="geometry" />
        </mxCell>
        <mxCell id="VwCA2_ZhlR9G2gFqnyRf-4" value="&lt;div&gt;@Resource：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这是java提供的一个注解， 跟@Autowire差不太多。为什么要有2个注入的注解呢？因为spring要支持java的@Resource注解。这样就算换依赖注入框架了，这个@Resource还是能用。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="10140" y="510" width="1800" height="100" as="geometry" />
        </mxCell>
        <mxCell id="N-Qvm8r343798RhVx9xi-1" value="&lt;div style=&quot;&quot;&gt;Bean生命周期&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=center;" parent="1" vertex="1">
          <mxGeometry x="6190" y="-471.5" width="1820" height="931" as="geometry" />
        </mxCell>
        <mxCell id="wqO39brmgy46Yg4rh6TY-1" value="&lt;div&gt;填充属性完成之后，接着继续进行下去：初始化bean。&lt;/div&gt;&lt;div&gt;initializeBean：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyBeanPostProcessorsBeforeInitialization：bean初始化前的操作。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;invokeInitMethods：调用初始化方法。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;applyBeanPostProcessorsAfterInitialization：bean初始化后的操作。开启了aop的时候，这里会有一个bpp会处理，生成代理对象。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="10120" y="670" width="1800" height="140" as="geometry" />
        </mxCell>
        <mxCell id="wqO39brmgy46Yg4rh6TY-2" value="&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;循环依赖&lt;/font&gt;：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;如果没有使用Spring，单纯的类之间的依赖引用，是没有问题的。A---B&amp;nbsp; &amp;nbsp;B---A&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;但是使用了Spring，为什么就会存在问题呢？因为Spring中的类都会经过bean的生命周期，那在这个过程中就会出现问题（类似于死锁等待？），有的场景spring会自动帮我们解决，有的需要我们手动解决。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring中到底是哪里出现了循环依赖的问题：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;Spring的bean生命周期中，创建实例---&amp;gt;属性填充，这里会进行自动注入，先从单例池里面去找对象。找到就返回填充。找不到就createBean创建对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;所以出问题的地方：A里面填充b属性的时候，单例池没有，去创建B对象。B对象创建的时候，去单例池找A对象（这时候A创建的流程还没有完，就不会加入到单例池），也找不到A，也会去创建A对象。这样形成死循环。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring是怎么解决这种循环依赖的呢？&lt;font color=&quot;#ff0000&quot;&gt;提前暴露出来对象，在实例化完成后就暴露。&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;三级缓存，3个单例池。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre; white-space: normal;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;1.&lt;font color=&quot;#ff0000&quot;&gt;singletonObjects&lt;/font&gt;：单例池。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;2.&lt;font color=&quot;#ff0000&quot;&gt;earlySingletonObjects&lt;/font&gt;：存的是半成品的对象。没有经过完整的声明周期。保证是单例。存的是三级缓存执行lambda表达式执行的返回结果。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;3.&lt;font color=&quot;#ff0000&quot;&gt;singletonFactories&lt;/font&gt;：打破循环。存的lambda表达式。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;singletonsCurrentlyInCreation：Set集合，存放的是正在创建中的那些bean。作用：判断哪些bean正在创建，这个能看出来这个类是否存在循环依赖。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;earlyProxyReferences：一个Map，加进去里面的都是提前进行AOP的bean。在初始化后的bpp里面，会根据这个map进行判断。但是：如果提前进行了AOP，bpp返回的是原始对象，并不是提前进行的AOP对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;为什么需要三级缓存，是如何演变来的？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;singletonObjects：是在对象整体初始化完成之后，加入的一个map。单例池。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;那么如果有循环引用的情况下，加入一个二级缓存（这里先认为是early），在实例化之后就加入到一个map中。 这样在创建B的时候，查询二级缓存就可以找到A的缓存对象（没有经过完整的生命周期），然后就可以赋值了，这样看起来，貌似不需要三级缓存呢。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;上面所说的确实好像不需要三级缓存。但是如果有AOP的情况下就不行了。&lt;/font&gt;众所周知，aop是在对象初始化完成之后才进行生成代理对象的。那么提前暴露的肯定是原始对象，B类里面得到的A对象就不是代理对象，而A对象本身是需要代理的。这就存在注入不对的问题了。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;那怎么处理AOP和循环依赖共存的问题呢？三级缓存 singletonFactories。&amp;nbsp;&lt;/font&gt; A对象在实例化后，就存入lambda表达式到三级缓存中，在B对象注入a属性的时候，调用&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getSingleton方法，一二级缓存找不到，再找三级缓存，这时候肯定能找到，再执行lambda表达式，得到一个对象（这个可能是原始对象，可能是代理对象），存入二级缓存中（为什么存二级缓存呢？存入二级缓存，如果后面还有用到的，可以取得）。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;代码上怎么判断产生了循环依赖呢？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;singletonsCurrentlyInCreation 这个集合里面有没有对应的类，在getSingleton的时候，如果存在，说明就有循环依赖的问题。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;怎么判断需不需要提前进行AOP呢？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;aop首先会有一个注解，会生成1个BPP，执行BPP的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getEarlyBeanReference&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;方法生成代理对象。&amp;nbsp; 如果没有AOP，就没有这个BPP，就不会执行方法生成代理对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;为什么不能把AOP全部放到&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getSingleton 方法那里呢？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这会打破对象生命周期的设计。产生额外的问题。。虽然现在也不知道有什么额外的问题。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;原型bean之间的循环依赖，三级缓存是不能解决的，每次都需要新new一个。@Lazy可以解决。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;构造方法之间的循环依赖，三级缓存是不能解决的，实例化之前就需要了。@Lazy可以解决。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;自己注入自己，三级缓存能解决。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="10120" y="880" width="1800" height="930" as="geometry" />
        </mxCell>
        <mxCell id="cOdqn_L4da1acbgq48kU-1" value="&lt;div&gt;protected Object getSingleton(String beanName, boolean allowEarlyReference) {&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&lt;/span&gt;Object singletonObject = this.singletonObjects.get(beanName);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&lt;/span&gt;if (singletonObject == null &amp;amp;&amp;amp; isSingletonCurrentlyInCreation(beanName)) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;synchronized (this.singletonObjects) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;singletonObject = this.earlySingletonObjects.get(beanName);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;if (singletonObject == null &amp;amp;&amp;amp; allowEarlyReference) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;ObjectFactory&amp;lt;?&amp;gt; singletonFactory = this.singletonFactories.get(beanName);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;if (singletonFactory != null) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;singletonObject = singletonFactory.getObject();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;this.earlySingletonObjects.put(beanName, singletonObject);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;this.singletonFactories.remove(beanName);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&#x9;&lt;/span&gt;return singletonObject;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: normal;&quot;&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="10120" y="1830" width="900" height="390" as="geometry" />
        </mxCell>
        <mxCell id="Af8h7lbZcbIOQ16bhMjw-1" value="&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;构造方法推断：&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;1、 默认情况，用无参构造方法，或者只有一个构造方法就用那一个&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2、 程序员指定了构造方法入参值，通过getBean()或者BeanDefinition.getConstructorArgumentValues()指定，那就用所匹配的构造方法&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3、 程序员想让Spring自动选择构造方法以及构造方法的入参值， autowire=&quot;constructor&quot;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4、 程序员通过@Autowired注解指定了某个构造方法，但是希望Spring自动找该构造方法的入参值&lt;/span&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="12010" y="510" width="1270" height="250" as="geometry" />
        </mxCell>
        <mxCell id="Af8h7lbZcbIOQ16bhMjw-2" value="&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;Spring启动过程：&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;启动的方式：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;a)&amp;nbsp;AnnotationConfigApplicationContext acT = new AnnotationConfigApplicationContext();&amp;nbsp;acT.register(MyBeanClass.class);acT.refresh();&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;b)AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(&quot;com.xht.spring5.factorybean&quot;);&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;上面那种没有传包路径，手动注册的一个配置类进去。 手动调用refresh方法。&amp;nbsp; 下面那个手动传的包路径。构造方法里面自己调用了。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先，new这个对象的时候，会先找父类去new：&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;----&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;GenericApplicationContext----&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutowireCapableBeanFactory&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;GenericApplicationContext：this.beanFactory = new DefaultListableBeanFactory(); 新建了1个beanFactory对像。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;AbstractAutowireCapableBeanFactory：&lt;font color=&quot;#ff0000&quot;&gt;ignoreDependencyInterface&lt;/font&gt;(BeanNameAware.class); 这里是&amp;nbsp;&lt;font color=&quot;#ff0000&quot;&gt;忽略了某些回调接口的自动依赖注入，因为这些接口是通过回调机制处理的（整个创建完成之后）&lt;/font&gt;、选择合适的bean实例化策略（GraalVM 使用 SimpleInstantiationStrategy 简单策略，否则，使用CGLIB 支持更加丰富的功能）。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigApplicationContext：创建&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotatedBeanDefinitionReader 、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathBeanDefinitionScanner 对象。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;a&lt;/span&gt;)&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotatedBeanDefinitionReader：调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry); 往beanFactory里面注册一些beanDefinition。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1. 注册&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConfigurationClassPostProcessor 的beanDefinition到beanFactory中。&lt;font color=&quot;#ff0000&quot;&gt;它是一个&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;BeanFactoryPostProcessor &lt;/font&gt;，负责处理&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;@Configuration&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;、&lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;@ComponentScan&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;、&lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;@Import&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;、&lt;/span&gt;&lt;code style=&quot;background-color: initial;&quot;&gt;@Bean&lt;/code&gt;&lt;span style=&quot;background-color: initial;&quot;&gt; 等注解。 会扫描@Configuration 类中的 @Bean方法，并生成beanDefinition。会处理@ComponentScan 里面的包路径，找到带有&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Component、@Service、@Repository 等注解的类，并将它们作为 bean 注册。&amp;nbsp; &lt;font color=&quot;#ff0000&quot;&gt;这些是在 refresh方法的&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;invokeBeanFactoryPostProcessors 方法内处理的&lt;/font&gt;。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.&lt;/span&gt;注册&amp;nbsp;AutowiredAnnotationBeanPostProcessor 的beanDefinition 到 beanFactory中。它是一个BeanPostProcessor，负责处理 @Autowire、@Value 注解的依赖注入逻辑。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.注册&amp;nbsp;CommonAnnotationBeanPostProcessor 的 beanDefinition 到 beanFactory中。它是一个BeanPostProcessor，负责处理 JAVAEE的一些标准注解：@PostConstruct、@PreDestory、@Resource等。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.注册&amp;nbsp;EventListenerMethodProcessor 的 beanDefinition 到beanFactory中，&lt;font color=&quot;#ff0000&quot;&gt;它是一个&amp;nbsp;BeanFactoryPostProcessor&lt;/font&gt;，负责处理@EventListener注解，会将注解的方法注册为事件监听器。哪里注册的？&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.注册&amp;nbsp;DefaultEventListenerFactory 的&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;beanDefinition 到beanFactory中，它既不是bpp，也不是bfpp，是一个工厂，配合&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EventListener 使用，在哪里配合的呢？&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;总结：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;registerAnnotationConfigProcessors 这个方法处理的是Spring内部使用的一些类，把他们的beanDefinition注册到BeanFactory里面。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;b)&amp;nbsp;ClassPathBeanDefinitionScanner：主要用来扫描路径得到 beanDefinition。同时设置 Environment、ResourceLoader。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;其次，register方法，将这个类弄成beanDefinition注册到beanFactory里面。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;然后，&lt;font color=&quot;#ff0000&quot;&gt;refresh方法&lt;/font&gt;：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.prepareRefresh：允许子容器设置一些内容到Environment中，比如Web中设置 Serverlet属性资源。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.obtainFreshBeanFactory：创建或获取最新的beanFactory，可能用于热加载、热部署等场景。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.prepareBeanFactory：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;a) 设置beanFactory的类加载器。设置表达式解析器。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;b) &lt;font color=&quot;#ff0000&quot;&gt;添加一个BeanPostProcessor&lt;/font&gt;：ApplicationContextAwareProcessor，这个是用来干嘛的？&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;c)&amp;nbsp;ignoreDependencyInterface：&lt;span style=&quot;background-color: initial;&quot;&gt;忽略了某些回调接口的自动依赖注入，因为这些接口是通过回调机制处理的（整个创建完成之后）&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;d)&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;registerResolvableDependency：注册Spring内部用的一些类，用type来查找到，比如：BeaFactory.class, beanFactory。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;e) &lt;font color=&quot;#ff0000&quot;&gt;添加一个BPP&lt;/font&gt;：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationListenerDetector，负责吧&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicantsListener类型的Bean注册到ApplicationContext中。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;f) 添加一些 Enviroment的单例bean到BeanFactory中。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessBeanFactory： 模版方法，允许子类向BeanFactory里面继续添加一些东西。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;接下来的步骤是处理得到beanPostProcessor：先得到BFPP，调用它们的方法，来得到所有的beanDefinition，然后根据beanDefinition来创建BPP。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;invokeBeanFactoryPostProcessors&lt;/font&gt;：这里 去beanFactory里面根据type找到 type为&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;BeanDefinitionRegistryPostProcessor &lt;/font&gt;(继承自BeanFactoryPostProcessor，见名思意，这些BFPP，就是来找到所有的BeanDefinition，并且注册到BeanFactory中) 的这些beanName，然后&lt;font color=&quot;#ff0000&quot;&gt;调用getBean方法&lt;/font&gt;，得到一个&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConfigurationClassPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BFPP，这个类的作用很大，涉及到配置类解析)，再调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;invokeBeanDefinitionRegistryPostProcessors 方法 ( 调用的是 对应BFPP 的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessBeanDefinitionRegistry 方法&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;)。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;，以&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConfigurationClassPostProcessor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;为例子，它的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessBeanDefinitionRegistry&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;方法，先找到哪些是配置类，然后解析配置类，找到该注册的那些bean，注册到beanDefinition中去。（包括 扫描路径、@Bean等）。&lt;font color=&quot;#ff0000&quot;&gt;总结这一步：找到所有的beanDefinition，注册到BeanFactory中。&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.registerBeanPostProcessors：直接调用&amp;nbsp;registerBeanPostProcessors ，在beanFactory中根据type找到&amp;nbsp;BeanPostProcessor 对应的这些 beanName，调用getBean 方法，得到真实的Bean对象。然后添加到&amp;nbsp;beanPostProcessors 这个List集合中。最后，手动new了一个&amp;nbsp;ApplicationListenerDetector 添加到 List集合中。&lt;font color=&quot;#ff0000&quot;&gt; 总结这一步：就是实例化所有的BeanPostProcessor&lt;/font&gt;。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;至此，处理得到BPP的步骤就完成了。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.initMessageSource：实例化&amp;nbsp;MessageSource 对象，让ApplicationContext拥有国际化的功能。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;8.initApplicationEventMulticaster：实例化&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationEventMulticaster 对象，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;让ApplicationContext拥有事件多播的功能。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;9.onRefresh：模版方法，给子类用的。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.registerListeners：注册监听器，只是把beanName放进了list里面，并没有进行getBean的实例化。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;11.&lt;font color=&quot;#ff0000&quot;&gt;finishBeanFactoryInitialization：完成非懒加载的单例bean的实例化&lt;/font&gt;。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;12.finishRefresh：完成，发布完成事件。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="12000" y="880" width="1510" height="1380" as="geometry" />
        </mxCell>
        <mxCell id="7qKkhKD1UjGEn0_p-cyN-1" value="&lt;div&gt;Spring整合Mybatis （跟OpenFeign类似呢）&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;MyBatis不整合Spring，也可以使用，需要自己去new 对象，然后利用对象的方法来进行调用。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;所谓的整合Spring，就是把这些框架提供的类，整合到Spring的bean工厂里面去。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Mybatis 的Mapper是一个接口，那么普通Spring 里面写 这个Mapper，肯定要报错，自动注入的时候，找不到这个类型。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过FactoryBean来代理这个Mapper，往bean工厂注入这个代理bean（这里如果直接操作beanDefinition的话，不知道设置beanClass为什么，行不通）。就可以。&amp;nbsp; 但是如果多个Mapper呢？不可能每个Mapper都写一个FactoryBean吧。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过手动声明N个BeanDefiniton，类型是FactoryBean，FactoryBean里面抽象一个Class，构造方法传Mapper.class。那也不可能我们手动写这么多beanDefinition吧？&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;通过一个类，实现&amp;nbsp;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;BeanDefinitionRegistryPostProcessor&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;，重写&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessBeanDefinitionRegistry 方法，在这里面添加这些beanDefinition，但是还是很多Mapper，不可能后续有加就写吧，想到的是扫描，但是扫描的路径在哪里呢，可以提供一个MapperScan注解，提供扫描mapper的路径。这种方式拿不到扫描注解的路径。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;除了通过上面的这种方式注册bean，还可以使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;ImportBeanDefinitionRegistrar （不能用@Component，只能在配置类上面@Import）&amp;nbsp;&lt;/font&gt;，重写&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;registerBeanDefinitions 方法。这个方法里面第一个参数就是注解的元数据信息，这样就可以找到扫描注解的路径了。如何扫描，则是利用spring自带的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ClassPathBeanDefinitionScanner。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Sprnig的扫描，只关注类，而Mybatis，只关心接口：定义一个类，继承ClassPathBeanDefinitionScanner，重写isCandidateComponent方法，判断是接口，返回true。 Spring的判断：1.不是接口 2.有@Component注解（其它一些注解 里面包含了@Component）。虽然重写了方法，可以解决接口问题。但是这个@Component注解呢？我们用Mybatis的时候不会加这个注解吧：扫描器可以做些处理：scanner.addIncludeFilter( 重写match方法，不做判断，全都返回true。)，这样我们就得到了指定路径下面的所有的mapper接口的beanDefinition。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;但是得到的这些beanDefinition不是我们想要的，我们想要的类型是FactoryBean，这里是mapper接口类型。还要做一些处理：遍历benDefinition重新设置BeanClassName为FactoryBean、构造方法参数设置(beanDefinition.getBeanClassName())。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;还要继续处理：FactoryBean的getObject产生的代理对象，现在是由我们手动jdk的方式进行的动态代理。这里应该由mybatis来代理。弄一个SqlSession属性，调用它的getMapper方法，传入对应的mapper接口类型，就能得到一个代理对象，但是这个SqlSession属性怎么来赋值呢？写一个setSqlSession方法，参数接收SqlSessionFactory对象，同时这个set方法上面写上@Autowire。现在只需要搞一个SqlSessionFactory对象到Spring容器中，这里autowire就能找到一个对象。那么就要在配置类上面，@Bean 一个方法，返回SqlSessionFactory（具体怎么得到，看官网的例子，需要有一个xml文件。报错的话，加一句sqlSessionFactory.getConfiguration().addMapper(mapperInterface);）。&amp;nbsp; 源码里面是不写@Autowire注解的，怎么实现呢？在修改beanDefinition的时候，强转Generic那个，然后调用setAutowireMode(byType)，这样遇到set方法的时候，会自动去找bean。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;为啥Spring boot里面mapper接口上面要加一个@Mapper注解呢？&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;为啥这里不加@Mapper注解？ 可能是spring boot里面默认扫描的路径是配置类的路径，它扫描的逻辑是有@Mapper注解的接口，而我们这里模拟的是，扫描的固定的路径，且接口全部扫描出来。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;为什么源码会有一个SqlSessionTemplate？为了解决mybatis里面的DefaultSqlSession线程不安全的问题。ThreadLocal，每个线程执行的时候先去自己的ThreadLocal里面去取DefaultSqlSession。没取到就新建一个sqlSession。openSqlSession()。&amp;nbsp; Spring整合mybatis之后，一级缓存可能失效。开启事务能解决，如果不开启事务，一级缓存就失效了。为什么跟事务还有关系呢？因为如果不加事务，那么默认这些sql就是独立运行的。自然就是每个sql一个sqlsession。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;一级缓存：同一个sqlsession里面，相同的sql会缓存。 建议不用mybatis的一级缓存，因为跟隔离级别有冲突。通常隔离级别的优先级更高一些。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;sqlsession跟数据库连接的关系？一个程序最多能有多少个数据库连接，多少个sqlsession？&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="13630" y="510" width="1350" height="1140" as="geometry" />
        </mxCell>
        <mxCell id="IE5RfXqA6oOnkhQH2YVe-1" value="如果我们自己实现一个spring boot：&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先，引用Spring boot的项目，不需要依赖Spring框架。而Spring boot框架里面需要自己依赖Spring。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.需要内嵌一个tomcat。需要用到Spring Mvc、Serverlet 来进行请求的识别转发。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.手动启动一个tomcat，里面的参数需要用到一个applicationContext（为什么？因为DispatcherServerlet需要匹配请求路径，需要找到具体的controller类，需要Spring扫描这些类，然后添加到上下文里面，方便查询。），也就是Spring的上下文。所以提前需要创建AnnotationApplicationContext。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.Spring容器里面需要有bean（Controller等）。需要增加配置类提供扫描路径。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这样就能实现一个简单的Spring boot了。但是Spring boot的精髓是 自动配置。如何实现?比如：默认用tomcat，自己可以配置，使用jetty或者 undertow。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;SpringBoot项目中肯定会有N多个包的引入，比如tomcat、netty。抽象一个接口WebServer，有个Start方法，然后 TomcatWebServer、JettyWebServer 实现各自的启动逻辑。但是我们运行的时候，肯定只能同时有1个类被实例化。我们可以写一个WebServerAutoConfiguration，然后用@bean的方式来把&lt;span style=&quot;background-color: initial;&quot;&gt;TomcatWebServer\&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;JettyWebServer&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; 来进行注入到Spring中（不处理的话，加不到Spring中去的）。怎么实现同时只有1个存在呢？：条件注解 Condition，每个注解里面进行判断：通过类加载器加载Tomcat 、Jetty中独有的类，看看能不能加载成功。如果能加载成功，说明在我们自己的项目中，是进行了排除某个依赖，并进行另外依赖的引入的。这样就行保证同时只有1个类被注入到Spring中。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;WebServerAutoConfiguration 是不会被Spring扫描注册的，那么这2个bean也就不会在Spring中，那么执行的时候，在beanfactory中根据type来查找bean，就找不到。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Import注解是用来，导入这个配置类到Spring的上下文中。因为Spring Boot中的类，是不能被扫描并注入到Spring中的。所以只能使用Import注解来注入。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;优化：SpringBoot中这么多自动配置的地方，不可能每个都这样写Import吧，事实上也不能写多个Import注解。所以还需要&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;AutoConfigurationImportSelector&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;类，它的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;selectImports 方法会去找所有的自动配置类（&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;结合&lt;font color=&quot;#ff0000&quot;&gt;SPI的机制&lt;/font&gt;来实现自动配置）来注入到Spring中。 resources/META-INF/services 下面 建一个全路径报名xxxx.AutoConfiguration （其中&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutoConfiguration是SpringBoot中的一个接口，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;WebServerAutoConfiguration实现这个接口&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），文件里面的内容 写&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;WebServerAutoConfiguration实现类的全路径包名，当然有其它自动配置类，也写上就行？&amp;nbsp; 同时，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; 需要&amp;nbsp;AutoConfigurationImportSelector implements DeferredImportSelector，这个类的作用主要是来在运行时动态的选择和加载配置类。把需要用到自动配置的配置类，都加进来。然后一起Import导入到Spring中。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;同时优化：1.多线程加载Spring.factories文件里面的关于自动配置相关的类。&amp;nbsp; 2.根据ClassLoader加载相关的类来判断是否返回给Spring容器。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="630" y="-1940" width="850" height="840" as="geometry" />
        </mxCell>
        <mxCell id="RMAdQYlgckE--yF0aG_I-1" value="Spring boot 2.7以前是怎么实现自动配置的？ 2.7以后呢？ Spring.factories有什么变化，多了一个什么文件？&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.7以前spring.factories 里面配置了key value，其中一个key就是&amp;nbsp;EnableAutoConfiguration，value是自动配置的类集合。比如：RabbitAutoConfiguration，这是rabbitmq的自动配置类。Spring boot 会在 处理Import注解的时候（&lt;span style=&quot;background-color: initial;&quot;&gt;AutoConfigurationImportSelector&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），会加载spring factories文件，加载其中&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EnableAutoConfiguration的value类型，然后进行解析，一般配置类上面都有一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConditionalOnClass，来判断是否进行 导入bean到Spring中。比如：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@ConditionalOnClass({RabbitTemplate.class, Channel.class})，会找我们自己的代码里面是否有用到&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;RabbitTemplate 和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Channel 类（是否注入到Spring中）。&amp;nbsp; 如果有用到，则会导入&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Import({RabbitAnnotationDrivenConfiguration.class, RabbitStreamConfiguration.class})&amp;nbsp; 这2个类到Spring 中。这样就完成了rabbitmq的自动注入。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Mybatis是没有自动配置类在Spring-boot-autoconfigure包中，在自己项目里面引入spring boot的mybatis的时候，他自己带了自动配置类。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.7以后得版本，spring factories里面没有自动配置类了，自动配置类放到了：META-INF/spring下面的一个文件里面。 spring boot源码里面，增加了一行，从这个文件里面去获取。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="-220" y="-2130" width="810" height="460" as="geometry" />
        </mxCell>
        <mxCell id="hmrYulRPjTJZnpTr9KgL-1" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Spring Boot&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;启动过程：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;一：构造SpringApplication对象：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;1. 把传入的类，记录到primarySources 属性上。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;2.推测应用类型，赋值到&amp;nbsp;webApplicationType 属性上：通过类加载器来加载一些特殊的类继而判断属于什么类型：REACTIVE、SERVLET、NONE。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.从spring.factpries文件中获取&amp;nbsp;BootstrapRegistryInitializer 类型，赋值到属性上，这是用来初始化&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;BootstrapRegistry 的。（Default&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;BootstrapContext&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;）,Spring Cloud里面会用到？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;从spring.factpries文件中获取 ApplicationContextInitializer类型&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;，赋值到属性上&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;，这是用来初始化 Spring容器的。（可以注册一个TypeFileter类型，然后可以决定是否注入到Spring中）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;从spring.factpries文件中获取&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationListener&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;类型&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;，赋值到属性上。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.推测出main方法执行的类，赋值到属性上。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;二：调用run 方法：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.创建&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultBootstrapContext，并且调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;bootstrapRegistryInitializers 的初始化方法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.从spring.factories文件中（这里可能取的缓存，因为在第一步里面已经取了）获取&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;SpringApplicationRunListener 相关的对象，默认提供了一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EventPublishingRunListener 来在下面启动的过程中负责发布事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;SpringApplicationRunListener&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;相关对象的starting方法。默认的类：发布一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationStartingEvent 事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.将main方法传入的参数，封装成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationArguments 对象。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;prepareEnvironment 方法来生成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConfigurableEnvironment 对象。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1）根据应用类型来创建不同的Enviroment对象，比如&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationServletEnvironment。（这一步jvm的设置参数已经放进去了。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;propertySources属性 的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;propertySourceList 集合属性 的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;PropertiesPropertySource 对象里面。）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;configureEnvironment：配置对象，找配置给这个对象赋值。添加&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;SimpleCommandLinePropertySource 对象（命令行参数信息）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3）发布&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationEnvironmentPreparedEvent 事件，spring.factories默认有1个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EnvironmentPostProcessorApplicationListener 来处理该事件：拿到 spring.factories 文件里面的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EnvironmentPostProcessor 相关的类，进行处理。 会&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;解析application.properties、application.yml文件，并添加到Environment对象中去。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.打印banner。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.创建Spring容器：createApplicationContext：根据应用类型进行创建&amp;nbsp;&amp;nbsp;AnnotationConfigServletWebServerApplicationContext&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;8.预处理 Spring 容器：prepareContext&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1）给Spring 容器设置 ClassLoader、ResourceLoader、ConversionService。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2）调用&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationContextInitializer 的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;initialize 方法，进行初始化容器。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3）发布一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationContextInitializedEvent 事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4）关闭&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultBootstrapContext。相当于完成了引导启动，过程中可以通过这个Context来共享对象，提升性能。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5）&lt;font color=&quot;#ff0000&quot;&gt;通过 load 方法，把启动配置类 封装成beanDefinition 注册到Spring中，注意，这里没有进行解析或者实例化，只是生成了beanDefinition。&lt;/font&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6）发布&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationPreparedEvent 事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;9.刷新Spring容器：&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;refreshContext&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1）&lt;font color=&quot;#ff0000&quot;&gt;首先调用 &lt;/font&gt;&lt;/span&gt;&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;ServletWebServerApplicationContext 的 refresh方法，然后调用父类 &lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;AbstractApplicationContext&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt; 的 refresh方法，在这进入Spring的流程&lt;/font&gt;！！！！！！&lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2）什么时候启动内置的Web服务器呢？在执行Spring的refresh过程中，调用&amp;nbsp;&amp;nbsp;onRefresh 方法，这是一个空的模板方法，直接调用子类&amp;nbsp;&lt;span style=&quot;color: rgb(255, 0, 0); white-space: pre; background-color: initial;&quot;&gt;ServletWebServerApplicationContext  &lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;的 onRefresh方法，里面会调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;createWebServer 方法来进行Web服务器的创建。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.发布&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationStartedEvent 事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;调用 ApplicationRunner、CommandLineRunner 的 callRunner 方法（这是干嘛的？）。 发布&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationReadyEvent 事件。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Spring和Spring Boot启动过程串起来是怎样的？还有一些顺序问题。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;从上面可以看到，是怎么传串联起来的。 注意的是，启动的时候只是先把配置类进行beanDefinition注册，至于什么时候去解析，则是Spring的流程了。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;先进行类扫描？还是先进行&lt;span style=&quot;background-color: initial;&quot;&gt;EnableAutoConfiguration注解解析？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;先解析配置类，解析到ComponentScan的时候，就会取扫描，然后吧扫描到的类注册成beanDefinition。然后才是解析Import注解。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;启动配置类上的几个注解作用：@SpringBootApplication-----&amp;gt;@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@SpringBootConfiguration：里面有@Configuration----&amp;gt;@Component ，代表是一个组件类。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.@EnableAutoConfiguration：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@AutoConfigurationPackage：里面有&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Import({AutoConfigurationPackages.Registrar.class})：向Spring中添加一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutoConfigurationPackages 类型的BeanDefinition，其中的basePackages属性存储的是传入启动类的包路径。（什么时候调用的注册接口呢？在Spring执行BFPP调用的时候，会执行。）。这里把包路径放到类里面有什么作用？MyBatis自动配置类里面会用到，可以用来扫描这个路径，就不用自己配置MapperScan路径了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@Import({&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AutoConfigurationImportSelector.class&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;})：这个的作用大概是用来查找每个包下面的MATA-INF/spring.factories文件里面的自动配置类，然后进行导入到Spring中。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里就要区分下：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;DeferredImportSelector、&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ImportSelector。为什么需要第一个只是先导入，然后推迟解析呢？因为配置类上面一般都有很多条件注解，判断Spring中是否存在某个类然后决定是否自动注入。&amp;nbsp; 如果先解析了，那么就不行了噻。判断不了了。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.@ComponentScan：这是Spring中的注解，需要注意一下这里的先后顺序问题。这里主要有2个Filter：AutoConfigurationExcludeFilter---&amp;gt;配置类就不进行扫描了，因为上面已经处理过了。TypeExcludeFilter---&amp;gt;自定义过滤类，需要注意的是要通过&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;ApplicationContextInitializer 来进行注入这个自定义过滤类到Spring中，这里才能正常工作。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;注意&amp;nbsp;&amp;nbsp;DeferredImportSelector 接口里面&amp;nbsp; 有一个&amp;nbsp;&amp;nbsp;getImportGroup&amp;nbsp; 方法，有一个内部接口 Group，这个组要是用来配置类分组，要看实现&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;DeferredImportSelector&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;接口的类里面&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getImportGroup&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;是不是返回的null，如果是null，就走实现类里面的 selectImports，如果不是，则走Group里面的process方法。&amp;nbsp; 主要是用来分组用的、？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;条件注解的工作机制，还是通过类加载器来判断，能加载成功就导入bean。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;spring boot项目 通过maven打包成jar包，main方法里面打印一下类加载器，会显示框架自定义个一个类加载器，为什么呢？&amp;nbsp; 打成jar包之后的文件夹目录有哪些，代表什么意思？&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="100" y="4213" width="1690" height="1607" as="geometry" />
        </mxCell>
        <mxCell id="hmrYulRPjTJZnpTr9KgL-2" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="2850" y="4410" width="1630" height="710" as="geometry" />
        </mxCell>
        <mxCell id="ogtzRiGRsrbSHcqAZTL8-1" value="" style="shape=image;imageAspect=0;aspect=fixed;verticalLabelPosition=bottom;verticalAlign=top;image=data:image/png,;" parent="1" vertex="1">
          <mxGeometry x="-580" y="4220" width="520" height="434" as="geometry" />
        </mxCell>
        <mxCell id="oOPcvpDIBV_vSLk0duB0-1" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;导入配置类，为什么&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;DeferredImportSelector&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;会等待扫描加载类的beandefinition完成之后，才进行导入，而&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ImportSelector&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;是直接在解析配置类的过程中就直接导入了：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;下面的代码是&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ConfigurationClassParser 类里面的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;processImports 方法里面，是在解析配置类的过程中执行的：&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;if (selector instanceof DeferredImportSelector) {&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp; &amp;nbsp; this.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector)selector);&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;} else {&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp; &amp;nbsp; String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp; &amp;nbsp; Collection&amp;lt;SourceClass&amp;gt; importSourceClasses = this.asSourceClasses(importClassNames, exclusionFilter);&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&amp;nbsp; &amp;nbsp; this.processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, false);&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;}&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;在parse解析完成配置类之后（扫描路径得到所有的类，有@Component注解的都当做是配置类，递归解析，这里扫描到的所有类都会注册beanDefinition），然后解析@Import的时候，如果是Deferred的接口，就不会注册beanDefiniton，代码如上图。 然后调用&amp;nbsp;&amp;nbsp;this.deferredImportSelectorHandler.process();&amp;nbsp; &amp;nbsp;processGroupImports----》getImports()，得到所有的配置类，继续递归解析，&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;得到所有配置类的 ConfigurationClass 对象的集合，赋值给&amp;nbsp;configurationClasses 属性（这里并没有注册beandefinition）。然后才会调用注册beanDefinition。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;为什么要延迟注册，因为很多自动配置类上面有条件注解，ConditionOnClass，要在bean工厂里面找到这个类型的时候才会导入bean。&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;verticalAlign=top;fontStyle=1;align=left;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="-810" y="5010" width="820" height="590" as="geometry" />
        </mxCell>
        <mxCell id="NJHlRpuy6pZzN0k-YDw0-1" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AOP：面向切面编程，是一种跟oop一样的编程思想。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;动态代理：java 中 是用动态代理来实现aop思想的。jdk动态代理、cglib动态代理。&amp;nbsp; AspectJ：有自己的一套实现aop方式，是在编译的时候对字节码进行了修改，是需要用AspectJ的编译器来编译的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Spring用到了AspectJ里面的一些东西：AspectJ是最早用注解来实现动态代理的，所以Spring还是延用了它的一些注解：@Aspect、@Before等，仅仅只是把注解定义抄过来了，后续怎么解析这些注解，是Spring中自己来实现的。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Spring对这2种技术进行了封装，使用 ProxyFactory 来 获取一个动态代理对象。会自动判断使用哪种：实现了接口，就用jdk的。如果没有接口，就用cglib。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AOP中的一些概念：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;PointCut：切点。就是想在哪里进行加逻辑。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Advice：要执行的代理逻辑。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Advisor：一个Advisor是由1个PointCut和1个Advice组成。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring中创建代理对象的方式： Spring AOP会使用动态代理来实现AOP，AaspectJ不是使用的动态代理，是在编译的时候就做好处理了。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.ProxyFactoryBean：只能针对某一个bean来创建，实质上是一个FactoryBean，通过getObject方法来创建代理对象。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.BeanNameAutoProxyCreator：继承自&amp;nbsp;AbstractAutoProxyCreator，而它又实现了&amp;nbsp;SmartInstantiationAwareBeanPostProcessor 接口，本质上也是一个BeanPostProcessor。详情看左边的代码。&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.DefaultAdvisorAutoProxyCreator：实现了&amp;nbsp;AbstractAdvisorAutoProxyCreator 接口，而它又继承了&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutoProxyCreator类，同上，本质上也是一个BPP。它会找到所有的Advisor类型的Bean，根据Advisor中的pointcut和advice，来确定要代理的bean和要代理的逻辑。&lt;font color=&quot;#ff0000&quot;&gt;这个不能解析@Aspect注解弄成Advisor对象注册到容器中，解析@Aspect是&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;AnnotationAwareAspectJAutoProxyCreator&amp;nbsp; 干的事。&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;第3点可以通过配置类来进行定义Aop的逻辑，但是这样写起来很费劲，可以通过注解的方式来更方便的实现。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;我们写aop的代码，以及如何从底层类演进的：先定义好切面、切点等，弄成bean，然后会导入一个BPP，所以会在生命周期的初始化前做一些操作：找到定义的这些切面、切点等，然后通过ProxyFactory生成动态代理类。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.首先在启动配置类上面加上 @&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EnableAspectJAutoProxy&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;注解：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@SpringBootApplication&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@EnableAspectJAutoProxy&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;public class XXXApplication {}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.写一个切面类：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Aspect&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;@Component&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;public class LoggingAspect {&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp;@Before(&quot;execution(* com.example.aopdemo.Calculator.*(..))&quot;)&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp;public void logBefore(JoinPoint joinPoint) {&lt;br&gt;&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp;logger.info(&quot;Before executing method: &quot; + joinPoint.getSignature().getName());&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;nbsp;}&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;这里的原理大概是：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.&lt;span style=&quot;background-color: initial;&quot;&gt;@EnableAspectJAutoProxy 其实里面导入了一个类：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;@Import(AspectJAutoProxyRegistrar.class)，这个类其实是&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;ImportBeanDefinitionRegistrar 接口类型，那么在解析配置类的时候，会调用其&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;registerBeanDefinitions 方法，里面会 注册一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;AnnotationAwareAspectJAutoProxyCreator &lt;/font&gt;类型到 beanDefinition中。&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;AnnotationAwareAspectJAutoProxyCreator&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;&amp;nbsp; 继承自&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;AspectJAwareAdvisorAutoProxyCreator 继承自&amp;nbsp;&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;AbstractAdvisorAutoProxyCreator。&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;这个类也是一个BPP。&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;AspectJAwareAdvisorAutoProxyCreator&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;会解析@Aspect、@Before等注解，弄成Advisor对象注册到spring容器中。&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); background-color: initial;&quot;&gt;AbstractAdvisorAutoProxyCreator&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;然后会在bean初始化之后的方法，会调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;wrapIfNecessary() 方法来进行判断是否需要AOP，如果需要，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;则找到所有类型的Advisor对象，进行匹配操作，生成代理对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;AspectJ中的注解：&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.@Before&amp;nbsp; &amp;nbsp; &amp;nbsp;2.@AfterReturning&amp;nbsp; &amp;nbsp; 3.@AfterThrowing&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4.@After&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;5.@Around&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Spring会把五个注解解析为对应的Advice类：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1. @Before：AspectJMethodBeforeAdvice，实际上就是一个MethodBeforeAdvice&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2. @AfterReturning：AspectJAfterReturningAdvice，实际上就是一个AfterReturningAdvice&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3. @AfterThrowing：AspectJAfterThrowingAdvice，实际上就是一个MethodInterceptor&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4. @After：AspectJAfterAdvice，实际上就是一个MethodInterceptor&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5. @Around：AspectJAroundAdvice，实际上就是一个MethodInterceptor&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;TargetSource：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;其实是要被代理的对象，这里抽象出来，是因为可能有很多不同的方式来得到被代理的对象吧？&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="160" y="2119" width="1660" height="1390" as="geometry" />
        </mxCell>
        <mxCell id="NJHlRpuy6pZzN0k-YDw0-2" value="&lt;div&gt;BeanNameAutoProxyCreator ：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;可以批量的对bean进行aop，指定了代理的逻辑（&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;实现了Advice接口，是一个切面逻辑&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），通过&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;setInterceptorNames来进行绑定。只能通过beanName来进行AOP。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;BeanNameAutoProxyCreator 其实是一个BPP，在生命周期的初始化阶段进行处理：如果beanName匹配到了，就进行代理类生成，其中的代理逻辑就是&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;在配置类里面或者组件类里面添加如下代码，解析这个类的时候就会把注册对应的beanDefinition。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;@Bean&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public BeanNameAutoProxyCreator beanNameAutoProxyCreator() {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; BeanNameAutoProxyCreator beanNameAutoProxyCreator = new BeanNameAutoProxyCreator();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beanNameAutoProxyCreator.setBeanNames(&quot;myTestA*&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beanNameAutoProxyCreator.setInterceptorNames(&quot;zhouyuAroundAdvice&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; beanNameAutoProxyCreator.setProxyTargetClass(true);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return beanNameAutoProxyCreator;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; @Bean&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public MethodInterceptor zhouyuAroundAdvice(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return new MethodInterceptor() {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @Override&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public Object invoke(MethodInvocation invocation) throws Throwable {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(&quot;before...&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Object result = invocation.proceed();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(&quot;after...&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return result;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-840" y="2100" width="970" height="699" as="geometry" />
        </mxCell>
        <mxCell id="NJHlRpuy6pZzN0k-YDw0-3" value="&lt;div&gt;DefaultAdvisorAutoProxyCreator ：&lt;/div&gt;&lt;div&gt;可以写很多的&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;DefaultPointcutAdvisor 来定义不同的 advisor。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;DefaultPointcutAdvisor 本质上也是一个BPP，会去找所有的Advisor，找到之后确定这个类是不是应该被代理，以及如何进行代理逻辑。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@Bean&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public DefaultPointcutAdvisor defaultPointcutAdvisor(){&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; NameMatchMethodPointcut pointcut = new NameMatchMethodPointcut();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pointcut.addMethodName(&quot;testAop&quot;);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DefaultPointcutAdvisor defaultPointcutAdvisor = new DefaultPointcutAdvisor();&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defaultPointcutAdvisor.setPointcut(pointcut);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; defaultPointcutAdvisor.setAdvice(new AfterReturningAdvice() {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; @Override&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (o!= null) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(&quot;方法 &quot; + method.getName() + &quot; 返回值为：&quot; + o);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; System.out.println(&quot;方法 &quot; + method.getName() + &quot; 没有返回值。&quot;);&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; });&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return defaultPointcutAdvisor;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; @Bean&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return defaultAdvisorAutoProxyCreator;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;fontStyle=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="-850" y="2839" width="970" height="750" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-10" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="h44oYwFNUk1gUKmLUQAU-2" target="h44oYwFNUk1gUKmLUQAU-3" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-2" target="h44oYwFNUk1gUKmLUQAU-5" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-12" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-2" target="h44oYwFNUk1gUKmLUQAU-7" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-2" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Advice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1">
          <mxGeometry x="2964" y="2189" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-13" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-3" target="h44oYwFNUk1gUKmLUQAU-4" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-3" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;Interceptor&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="2574" y="2399" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-27" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-4" target="h44oYwFNUk1gUKmLUQAU-26" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-4" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;MethodInterceptor&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="2574" y="2579" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-14" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-5" target="h44oYwFNUk1gUKmLUQAU-6" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-5" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;BeforeAdvice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="2864" y="2399" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-20" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-6" target="h44oYwFNUk1gUKmLUQAU-18" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-6" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;MethodBeforeAdvice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="2864" y="2567" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-7" target="h44oYwFNUk1gUKmLUQAU-8" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-16" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-7" target="h44oYwFNUk1gUKmLUQAU-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-28" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" target="h44oYwFNUk1gUKmLUQAU-26" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="3384" y="2379" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-31" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.5;exitY=0;exitDx=0;exitDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-7" target="h44oYwFNUk1gUKmLUQAU-29" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-7" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;AfterAdvice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="3269" y="2399" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-8" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;ThrowsAdcice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="3154" y="2559" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-9" value="«interface»&lt;br style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;AfterReturningAdcice&lt;/span&gt;" style="html=1;whiteSpace=wrap;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="3424" y="2559" width="230" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-18" target="h44oYwFNUk1gUKmLUQAU-19" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-18" value="AspectJMethodBeforeAdvice" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2849" y="2739" width="260" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-19" value="@Before" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="2879" y="2909" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-25" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-22" target="h44oYwFNUk1gUKmLUQAU-23" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-22" value="AspectJAfterReturningAdvice" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="3424" y="2739" width="260" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-23" value="@AfterReturning" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="3454" y="2899" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-24" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.446;entryY=0.021;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-9" target="h44oYwFNUk1gUKmLUQAU-22" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-33" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-26" target="h44oYwFNUk1gUKmLUQAU-32" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-26" value="AspectJAfterThrowingAdvice" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2559" y="2739" width="260" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-35" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-29" target="h44oYwFNUk1gUKmLUQAU-34" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-29" value="AspectJAfterAdvice" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="2210" y="2739" width="260" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-30" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-4" target="h44oYwFNUk1gUKmLUQAU-29" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-32" value="@AfterThrowing" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="2589.5" y="2909" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-34" value="@After" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="2240" y="2909" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-39" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-36" target="h44oYwFNUk1gUKmLUQAU-38" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-36" value="AspectJAroundAdvice" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
          <mxGeometry x="1910" y="2739" width="260" height="110" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-37" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.446;entryY=-0.009;entryDx=0;entryDy=0;entryPerimeter=0;exitX=0.25;exitY=0;exitDx=0;exitDy=0;" parent="1" source="h44oYwFNUk1gUKmLUQAU-4" target="h44oYwFNUk1gUKmLUQAU-36" edge="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="2580" y="2609" as="sourcePoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-38" value="@Around" style="html=1;whiteSpace=wrap;fontSize=18;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1">
          <mxGeometry x="1941" y="2899" width="200" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-40" value="ProxyFactory的原理：&lt;div&gt;addAdvise的底层其实也是构建一个Advisor。&lt;/div&gt;&lt;div&gt;&lt;br&gt;1.确定使用cglib还是jdk来进行动态代理：ProxyFactory.getProxy()方法里面：if (!config.isOptimize() &amp;amp;&amp;amp; !config.isProxyTargetClass() &amp;amp;&amp;amp; !this.hasNoUserSuppliedProxyInterfaces(config))&amp;nbsp; 就使用Jdk，否则用cglib。&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;这里的config传的是ProxyFactory。首先是优化判断，jdk以前的版本cglib的效率较高，所以配置了这个的话，就直接用cglib。如果设置&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;isProxyTargetClass为true，代表要代理的是类，也直接用cglib。如果ProxyFactory.addInterface，设置了接口，就用jdk。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;2.得到代理对象后，执行对象的某个方法执行流程：以jdk为例子，执行对象方法的时候，&lt;font color=&quot;#ff0000&quot;&gt;先进入到invoke方法中（cglib是intercept方法）&lt;/font&gt;：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1）取出targetSource，判断equals方法，hashcode方法等等不需要执行代理逻辑。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2）如果ProxyFactory设置了exposeProxy为true，则把这个代理对象放入ThreadLocal中。这样在当前线程中可以拿到代理对象，比如在被代理的方法里面，使用AopContext.getCurrentProxy方法拿到代理对象。事务里面判断事务失效的时候可以用。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3）调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getInterceptorsAndDynamicInterceptionAdvice() 方法，获取&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;调用链集合：&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;获取所有的Advisor集合，遍历，强转成 PointcutAdvisor，筛选 pointcut，其中有2个方法，1个筛选类，一个筛选方法。首先，进行类的筛选，筛选过了之后，在进行方法筛选，如果方法筛选通过之后，先把advisor转换成MethodInterceptor集合（一般就只有1个，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor 适配器相关。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;），还要判断 isRuntime方法返回的是不是true，如果是，则将集合里面的转换成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InterceptorAndDynamicMethodMatcher 对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4）如果&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;调用链集合为空，则直接反射调用被代理的方法。如果不为空，则将调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;链集合跟其他N个参数一起构造成 MethodInvocation 对象（这里是用jdk动态代理，所以就是反射方法调用器。）。然后调用这个对象的proceed()方法，返回代理执行的结果。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;执行advice的顺序就是代码添加的advice的顺序。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="1900" y="3059" width="960" height="561" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-41" value="&lt;span style=&quot;font-size: 18px;&quot;&gt;MethodInterceptor是最灵活的&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="2003.25" y="2429" width="264.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-42" value="&lt;div&gt;将advisor转换成MethodInterceptor：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;如果这个advisor是 MethodInterceptor 的实例，就直接强转就行了。如果不是，就用适配器进行操作，默认有3种适配器：MethodBeforeAdviceAdapter、AfterReturningAdviceAdapter、ThrowsAdviceAdapter。这些适配器的作用就是将不是&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor 的实例 转换成&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor 的实例。看类图上，这3个接口都是跟它同一层级的。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;调用适配器的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getInterceptor 方法，就是获取advisor里面的advice，然后封装成对应的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;子类。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;proceed方法：责任链模式&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先有一个&amp;nbsp;currentInterceptorIndex 变量，从-1开始，方便递归的时候，实现for循环遍历&amp;nbsp;&amp;nbsp;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;集合的效果。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;如果&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;currentInterceptorIndex&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; 已经是最大了，说明到底了，就执行被代理对象的那个方法了。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;如果不是，则取出&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;，判断是不是&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;InterceptorAndDynamicMethodMatcher&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;的类型，如果是，则判断pointcut里面的方法筛选（3个参数的那个方法），如果匹配，则调用对应的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;的invoke方法，执行代理逻辑。如果不匹配，则继续调用 proceed方法，进行递归，跳过这个advice。 如果不是这个类型，也调用这个invoke方法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;不同的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp;类型有不同的invoke方法：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodBeforeAdviceInterceptor的invoke：先调用advice的before方法，执行你自定义的before方法里面的代理逻辑，然后再调用proceed方法，进行下一个advice的逻辑执行。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;proceed方法和invoke方法的关联：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;proceed方法是&amp;nbsp;ReflectiveMethodInvocation 类，是用来处理这个代理类所有的advice代理方法的。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;invoke方法 是 一个 advice的方法的执行器。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="2920" y="3059" width="990" height="551" as="geometry" />
        </mxCell>
        <mxCell id="h44oYwFNUk1gUKmLUQAU-43" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Spring AOP跟 ProxyFactory的关联：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;首先@&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;EnableAspectJAutoProxy，会导入一个&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AspectJAutoProxyRegistrar&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;类进来，执行BFPP，解析配置类的时候，解析上面的注解@Import，执行对应的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;registerBeanDefinitions 方法，注册一个&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AnnotationAwareAspectJAutoProxyCreator 类型的beanDefinition，它是一个BPP。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;那么在bean的生命周期中，初始化完成后，执行&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AbstractAutoProxyCreator （这个是注册进来的那个顶层层父类） 的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;postProcessAfterInitialization 方法，调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;wrapIfNecessary 方法，来判断是否需要进行AOP操作：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.如果本身这个类是@Aspect的类，不需要进行aop。同时shouldSkip模板方法，提供用户自定义逻辑。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getAdvicesAndAdvisorsForBean 方法 获取匹配的advice和advisor。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;a）在beanFactory中找类型为Advisor的bean。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;b）调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;buildAspectJAdvisors 方法，找beanFactory里面所有的类，循环找到@Aspect的类，然后调用getAdvisors方法解析得到Advisor集合。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;c）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;findAdvisorsThatCanApply：进行筛选，也是根据pointcut来进行，先匹配类，再匹配方法（至少有1个方法满足）。这个匹配跟ProxyFactory里面的差不多。只是这里是用来判断需不需要创建代理对象。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;d）&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;sortAdvisors：对符合条件的这些进行排序。@Order注解。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.如果找到Advisor不为空，则调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;createProxy 方法创建一个代理对象。如果为空不创建代理对象：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里就是用的ProxyFactory来创建的。也是调用addAdvisors方法来添加上面得到的这些advisor。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;后续执行被代理对象的方法的时候就跟ProxyFactory的流程一样了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.返回这个代理对象。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Spring Aop只有4个Advice，但是AspectJ有5个。&lt;div&gt;AfterReturningAdvice、AroundAdvice（其实是MethodInterceptor）、BeforeAdvice、ThrowsAdvice。&lt;/div&gt;&lt;div&gt;@After就是多的一个，类似finally？&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="3980" y="2739" width="1000" height="561" as="geometry" />
        </mxCell>
        <mxCell id="VWP3KYTYqFkFXHVYculG-1" value="Spring事务：&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;show status like &#39;%Threads_connected%&#39;; 可以查看数据库的连接数&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring 通过动态代理机制来实现事务管理。当你在一个类上标记了 @Transactional 注解时，Spring 会为这个类创建一个代理对象，在代理对象的方法中会加入事务管理的逻辑，比如开启事务、提交事务、回滚事务等。而当你在&lt;font color=&quot;#ff0000&quot;&gt;类内部直接调用方法时，调用的是原始对象的方法，而不是经过代理对象的方法，因此无法触发事务管理的逻辑&lt;/font&gt;。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@EnableTransactionManagement：我们用到事务要加这个注解。Spring Boot不需要加。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.@Import({TransactionManagementConfigurationSelector.class})，要导入的类是一个ImportSelector类型，所以执行其selectImports方法，会返回2个类型，再进行导入这2个类。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1）AutoProxyRegistrar：ImportBeanDefinitionRegistrar 类型，会执行它的&amp;nbsp;registerBeanDefinitions 方法，向容器里面注册&amp;nbsp;InfrastructureAdvisorAutoProxyCreator 类型的beanDefinition。 这个beanDefinition，是一个BPP，是用来判断bean是否需要被代理。执行&amp;nbsp;AbstractAdvisorAutoProxyCreator.findCandidateAdvisors 方法的时候，跟Aop是不一样的逻辑，&lt;font color=&quot;#ff0000&quot;&gt;这里不会去解析@Aspect注解&lt;/font&gt;。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2）ProxyTransactionManagementConfiguration：是一个配置类，@Bean的方式导入了3个类。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;a&lt;/span&gt;）BeanFactoryTransactionAttributeSourceAdvisor：这是一个Advisor，构建这个对象，需要用到下面的2个对象。这个advisor的pointcut是一个&amp;nbsp;TransactionAttributeSourcePointcut 类，这个类 的方法筛选器和类筛选器都用到了 下面 的这个Source类。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;b）TransactionAttributeSource：相当于是一个pointcut。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;c）TransactionInterceptor：是一个&amp;nbsp;MethodInterceptor，也就是一个Advice。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;执行全过程：（所有用AOP实现的功能，都大差不差的，就是advisor不同）&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Spring启动的时候：会创建1个BPP，同时会导入3个类的BeanDefinition（advisor、pointcut、advice）。在spring实例化类的时候，比如创建UserService的时候，BPP的初始化后方法，会去拿到所有的advisor（这里就会实例化这些advisor类），然后进行匹配pointcut，看看是否需要被代理，生成代理类（ProxyFactory生成代理类，这个类上面就包含了它对应的advisor）。&lt;font color=&quot;#ff0000&quot;&gt;这个代理类底层实现，可能有一个同名的方法，里面会调用&amp;nbsp;CglibAopProxy.intercept 方法，或者&amp;nbsp;JdkDynamicAopProxy.invoke 方法&lt;/font&gt;。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;调用的时候，会先到&amp;nbsp;CglibAopProxy.intercept 方法里面，获取得到调用链（这里也会筛选pointcut，然后把advisor强转成MethodInterceptor）&lt;span style=&quot;background-color: initial;&quot;&gt;，然后构造出CglibMethodInvocation对象，调用proceed方法，就会调用到这些&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor 的invoke方法。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;每种aop功能都有不同的advisor，也就是有不同的MethodInterceptor，在事务的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;MethodInterceptor里面，就有事务的所有逻辑（创建、提交、回滚、挂起、恢复等）。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="5090" y="2270" width="1080" height="720" as="geometry" />
        </mxCell>
        <mxCell id="GIlB6JDicjnRymixdymo-1" value="Spring AOP 的应用有很多：&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.事务：@Transaction 。生成一个代理对象，代理的逻辑就是开启事务，执行方法逻辑，提交事务。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.异步化：@EnableAsync 开启，@Async 用在方法上 。生成一个代理对象，代理的逻辑就是从线程池拿一个线程执行对应的方法。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="3962" y="2080" width="1000" height="561" as="geometry" />
        </mxCell>
        <mxCell id="3wYIFsVCOA92t33HCRRv-1" value="事务的：创建、提交、回滚、挂起、恢复 都是通过事务管理器来操作的。" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=18;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="5240" y="2140" width="660" height="80" as="geometry" />
        </mxCell>
        <mxCell id="L8sj91GdE4BC496Hn-29-1" value="&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;事务的切面逻辑：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;invokeWithinTransaction：拿到事务注解的属性信息，获取事务管理器（注解属性里可指定，不然就从beanFactory里面去拿，所以这就是为什么要在配置类里面注册一个事务管理器），在获取事务名称（一般都是方法的名称），然后调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;createTransactionIfNecessary 方法---&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;tm.getTransaction---&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;doGetTransaction：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;(ConnectionHolder)TransactionSynchronizationManager.getResource （这里是从事务管理器里面去拿一个Resource，也就是连接持有器。&lt;font color=&quot;#ff0000&quot;&gt;从ThreadLocal里面去拿的，第一次来肯定拿不到。&lt;/font&gt;），然后根据注解上的传播机制来判断（一般是 0、3、6）：（这里有挂起逻辑，先不管），&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;startTransaction：&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;newTransactionStatus构造一个Status对象，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;doBegin() 方法，判断事务对象里面是否有链接（存的是前面从ThreadLocal里面拿的ConnectionHolder），没有的话，就调用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;getConnection 方法获取一个数据库连接，并把connection存进去，然后设置事务隔离级别，设置autoCommit为false，设置连接的timeout值，然后调用事务管理器&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;TransactionSynchronizationManager.bindResource 把连接对象和DataSource绑定到一起（&lt;font color=&quot;#ff0000&quot;&gt;存到ThreadLocal里面，以后就能拿到&lt;/font&gt;）。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="6330" y="2262" width="1050" height="738" as="geometry" />
        </mxCell>
        <mxCell id="L8sj91GdE4BC496Hn-29-2" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;div&gt;Spring事务传播级别：&lt;/div&gt;&lt;div&gt;int PROPAGATION_REQUIRED = 0;&lt;/div&gt;&lt;div&gt;int PROPAGATION_SUPPORTS = 1;&lt;/div&gt;&lt;div&gt;int PROPAGATION_MANDATORY = 2;&lt;/div&gt;&lt;div&gt;int PROPAGATION_REQUIRES_NEW = 3;&lt;/div&gt;&lt;div&gt;int PROPAGATION_NOT_SUPPORTED = 4;&lt;/div&gt;&lt;div&gt;int PROPAGATION_NEVER = 5;&lt;/div&gt;&lt;div&gt;int PROPAGATION_NESTED = 6;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring事务隔离级别：&lt;/div&gt;&lt;div&gt;int ISOLATION_DEFAULT = -1;&lt;/div&gt;&lt;div&gt;int ISOLATION_READ_UNCOMMITTED = 1;&lt;/div&gt;&lt;div&gt;int ISOLATION_READ_COMMITTED = 2;&lt;/div&gt;&lt;div&gt;int ISOLATION_REPEATABLE_READ = 4;&lt;/div&gt;&lt;div&gt;int ISOLATION_SERIALIZABLE = 8;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;int TIMEOUT_DEFAULT = -1;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontStyle=1;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="6360" y="1840" width="850" height="380" as="geometry" />
        </mxCell>
        <mxCell id="zVuzrLNmkFbllxcp8zSO-1" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;为什么不建议使用@Transancation注解呢？&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;编程式事务（自己写代码start）、声明式事务（注解）。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;声明式事务的问题：&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.粒度问题。注解很容易被修改代码的人进行忽略。如果加入一些方法（远程调用、消息发送、缓存更新、文件写入等），这些方法中的操作 不能够进行回滚（发消息，调用了无法撤回），并且会拉长整个事务的执行时间，导致数据库连接一直被占用，连接池有耗尽的风险。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;什么情况下spring aop会失效？&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;什么情况下Spring 事务会失效？&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这里说的是声明式注解事务会失效。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 18px; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;1、@Transactional 应用在非 public 修饰的方法上&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2、@Transactional 注解属性 propagation 设置错误&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3、@Transactional 注解属性 rollbackFor 设置错误&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4、同一个类中方法调用，导致@Transactional失效&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5、异常被catch捕获导致@Transactional失效&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6、数据库引擎不支持事务&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;实际案例：项目里面会有很多个切面，分别处理不同的逻辑，某一天发现Service层的事务全部失效了，一个Sql执行失败后并没有进行回滚。排查之后发现，新增了一个切面，这个切面做了一个异常的统一捕获，导致事务的切面没有捕获到异常，导致回滚失败。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;这也算做事aop失效了吧？也可以不算，毕竟还是走到了aop里面的逻辑的。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontStyle=1;fontSize=18;" vertex="1" parent="1">
          <mxGeometry x="7450" y="2289" width="850" height="661" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
