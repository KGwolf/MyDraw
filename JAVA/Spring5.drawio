<mxfile host="app.diagrams.net" modified="2023-03-21T09:17:02.384Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36" etag="J44pw0ySPMaAawZ7JYG2" version="21.0.8" type="github">
  <diagram name="第 1 页" id="j0T0W_XY4i96COsHRtta">
    <mxGraphModel dx="2049" dy="1091" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="wJDUlHO4tCs9Kh0-4UFC-2" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1310" y="420" width="1200" height="1030" as="geometry" />
        </mxCell>
        <mxCell id="BxTBeL077zcQ3UxvTALr-2" value="&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;# Spring&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;核心就是refresh方法&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;1.prepareRefresh：给上下文赋一些初始值。做准备工作。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;2.obtainFreshBeanFactory：创建一个DefaultListableBeanFactory。加载BeanDefinition，其中loadBeanDefinitions()，有很多重载，直到doLoadBeanDefinitions()，加载配置文件，registerBeanDefinitions()，再doRegisterBeanDefinitions()，再parseBeanDefinitions()，这里2个分支，parseDefaultElement()，parseCustomElement()，一个是默认标签，一个是自定义标签。最终是给2个地方赋值：beanDefinitionMap（一个Map集合），beanDefinitionNames（一个存放名字的集合）。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px; border-color: var(--border-color);&quot;&gt;其中parseCustomElement()，除了进行自己定义的标签会处理，如果还有&amp;lt;compent-scan&amp;gt;标签，进行处理：parseCustomElement()，通过&lt;/font&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;scanner.doScan(包路径),，先根据路径找到路径下面的所有文件（类文件），然后看看是否有对应的注解（@Component，@Service等），找到则加入BeanDefinitionMap和name。同时调用&lt;/span&gt;&lt;span style=&quot;text-align: left;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;registerComponents()方法，进行&lt;/font&gt;&lt;/span&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;组件注册（包括注册一些内部的注解后置处理器，触发注册事件）：&lt;/font&gt;ConfigurationClassPostProcessor、AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor等，将这几个一起加入到BeanDefinitionMap中。&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;3.&lt;/span&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;prepareBeanFactory：给BeanFactory赋一些初始值，向BeanFactory中添加一些BeanPostProcessor、&lt;/font&gt;ignoreDependencyInterface&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;&quot;&gt;	&lt;/span&gt;registerResolvableDependency。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;4.postProcessBeanFactory：可以注册一些特殊的BeanPostProcessors,默认没有实现，丢给子类去进行扩展，比如Spring Mvc。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;5.invokeBeanFactoryPostProcessors：调用各种的BFPP，创建BFPP类。&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;一：在BeanDefinationMap 中查找有没有BeanDefinitionRegistryPostProcessor类型的BeanName&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;1.匹配实现了&lt;/font&gt;PriorityOrdered接口的&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;2.匹配实现了Ordered接口的&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;3.匹配都没有实现的&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;匹配到了之后，&lt;/span&gt;&lt;b style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;调用beanFactory.getBean()来&lt;/span&gt;&lt;font style=&quot;font-size: 25px;&quot;&gt;创建BFPP对象&lt;/font&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;，并且调用对象的postProcessBeanDefinitionRegistry()方法，这个方法的作用大概就是增强BeanDefinition，给它赋值一些其它的东西。&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;举个例子：我们之前loadBeanDefinition的时候，有注册过一个组件&lt;/font&gt;internalConfigurationAnnotationProcessor，它的对象类型是ConfigurationClassPostProcessor，实现了BeanDefinitionRegistryPostProcessor接口，所以会调用这个类的postProcessBeanDefinitionRegistry()方法，它里面的实现作用主要是：&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;在beanDefinition中找到有注解的类，然后去处理@PropertySource、@ComponentScan、@Import、@ImportResource、@Bean&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;处理的结果就是给beanDefinitaion赋值，或者给环境变量增加值等。&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;postProcessBeanDefinitionRegistry&lt;/pre&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;,很显然，&lt;/font&gt;&lt;/div&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;ConfigurationClassPostProcessor是继承自&lt;/span&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;BeanDefinitionRegistryPostProcessor的，所以可以找到，同时，将找到的这些beanname，进行对象创建！！！！&lt;br&gt;&lt;/span&gt;&lt;br&gt;再调用&lt;span style=&quot;color: rgb(255, 198, 109); background-color: rgb(43, 43, 43); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;invokeBeanDefinitionRegistryPostProcessors方法，调用&lt;/span&gt;&lt;span style=&quot;background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;postProcessBeanDefinitionRegistry方法，会进入到&lt;/span&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;ConfigurationClassPostProcessor类的&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); background-color: rgb(43, 43, 43); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;processConfigBeanDefinitions方法，处理@&lt;/span&gt;&lt;span style=&quot;color: rgb(128, 128, 128); background-color: rgb(43, 43, 43); font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;Configuration、@Service等等注解&lt;/span&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;font style=&quot;border-color: var(--border-color);&quot;&gt;3.如果是纯注解的方式，流程是怎么走的呢？怎么查找beandefinition的信息？look-up标签的效果如何用注解的方式来实现？&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify; border-color: var(--border-color); font-size: 18px;&quot;&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="100" y="500" width="1110" height="1320" as="geometry" />
        </mxCell>
        <mxCell id="3Tz9ayiB8aLOj15XIJGB-1" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;parseDefaultElement()：包括了以下标签：&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;IMPORT_ELEMENT、&lt;/span&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;ALIAS_ELEMENT、&lt;/span&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;BEAN_ELEMENT、&lt;/span&gt;&lt;span style=&quot;font-size: 18px; background-color: initial;&quot;&gt;NESTED_BEANS_ELEMENT&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1361" y="510" width="280" height="160" as="geometry" />
        </mxCell>
        <mxCell id="3Tz9ayiB8aLOj15XIJGB-2" value="&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;doScan是如何扫描的？&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;findCandidateComponents(包名)方法，&lt;/font&gt;首先找到包名下面的所有类文件，isCandidateComponent方法判断是否是组件，&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;其实就是看类上面的注解是否有@Component，像@Service等这种，其实也是继承了@Component注解的，都算。&lt;/pre&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1351" y="700" width="960" height="120" as="geometry" />
        </mxCell>
        <mxCell id="3Tz9ayiB8aLOj15XIJGB-3" value="&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;registerComponents：注册组件&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;registerAnnotationConfigProcessors()方法，就是判断BeanFactory里面的BeanDefinition里面有没有那些beanname，&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;如果没有，就调用registerPostProcessor()方法，注册进入BeanDefinition里面。&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;beandefinitionsMap加入如下信息：&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;internalConfigurationAnnotationProcessor---&amp;gt;ConfigurationClassPostProcessor&lt;/font&gt;&lt;br&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;internalAutowiredAnnotationProcessor    ---&amp;gt;&lt;/font&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;AutowiredAnnotationBeanPostProcessor&lt;/font&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;    &lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;internalCommonAnnotationProcessor       ---&amp;gt;&lt;/span&gt;&lt;b style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 22px;&quot;&gt;CommonAnnotationBeanPostProcessor(这个很重要，后面有用到！)&lt;/font&gt;&lt;/b&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial; font-family: Helvetica; white-space: normal;&quot;&gt;internalEventListenerProcessor&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ---&amp;gt;EventListenerMethodProcessor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;internalEventListenerFactory            ---&amp;gt;DefaultEventListenerFactory&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1351" y="840" width="1130" height="460" as="geometry" />
        </mxCell>
        <mxCell id="3Tz9ayiB8aLOj15XIJGB-4" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;parseCustomElement&lt;/font&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;()：包括但不限于以下标签：&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;context:component-scan、以及各种自定义的标签&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="1691" y="530" width="420" height="120" as="geometry" />
        </mxCell>
        <mxCell id="wJDUlHO4tCs9Kh0-4UFC-3" value="&lt;b&gt;loadBeanDefinition方法重要的地方&lt;/b&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=23;" vertex="1" parent="1">
          <mxGeometry x="1731" y="440" width="419" height="20" as="geometry" />
        </mxCell>
        <mxCell id="wJDUlHO4tCs9Kh0-4UFC-4" value="&lt;font style=&quot;font-size: 18px;&quot;&gt;所以最后obtainFreshBeanFactory执行完成之后，BeanDefinition有2块内容：&lt;br&gt;1.是扫描包路径下自己定义的有对应注解的类，&lt;br&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;2.内部注册的一些组件类。&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1431" y="1320" width="680" height="90" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
