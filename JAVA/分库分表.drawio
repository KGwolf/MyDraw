<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36" version="26.0.16">
  <diagram name="第 1 页" id="89eAlUvdY-vfsUuqKLdn">
    <mxGraphModel dx="1687" dy="878" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="RwhGDpmJjXARNoensnjg-1" value="什么情况下需要用到分库分表？&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;热点数据很多，比如我们审方信息，大区域审方一天的量就几百万次。任务药品表一天都是快3千万。一个月都是9亿的数据。而这1个月的数据都可能是热数据，中途可能会有修改，必须事务保证，就必须要放到mysql这种关系型数据库中。有事务的保证。&amp;nbsp;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;什么是分库分表？&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;分库、分表、既分库又分表。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;分库解决的是单库的连接池不够问题。 分表解决的是单表数据量太大，然后查询效率慢。&amp;nbsp; 如果2者都有，就需要既分库又分表。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;数据归档和分库分表区别？&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;分库分表​ → 解决 ​热数据的横向扩展问题​（高并发、低延迟的事务操作）。&lt;br&gt;​&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;数据归档​ → 解决 ​冷数据的存储成本和查询效率问题​（低频访问的历史数据分析）。&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;归档无法替代分库分表的事务处理能力，反之亦然。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;分库分表和数据归档是正交的解决方案，前者解决热数据的事务与性能问题，后者解决冷数据的存储与分析问题。&lt;br&gt;​&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;归档无法替代分库分表，因为其无法满足高频事务的ACID要求；分库分表也无法替代归档，因为其存储成本高且不适合分析场景。&lt;br&gt;​&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;最佳实践是分层架构：&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;热数据层（MySQL分片） → 高并发事务。&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;温数据层（MySQL只读副本） → 近期高频查询。&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;冷数据层（ClickHouse/ES） → 历史数据分析。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;fontStyle=1;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="260" y="260" width="700" height="530" as="geometry" />
        </mxCell>
        <mxCell id="RwhGDpmJjXARNoensnjg-2" value="从Mysql集群到ShardingShphere的过程：&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.首先Mysql 搭建主从集群。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;主从同步数据的方式：异步复制(主节点异步发送 bin log日志给从节点，不保证一定发送成功)、半同步复制（主节点发送bin log给从节点，并且需要等待一个超时时间的间隔）。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.搭建Mysql高可用集群。MMM、MHA、MGR。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.多数据源管理：&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; Spring 提供的 AbstractRoutingDataSource。 通过ThreadLocal变量来实现快速切换目标数据库。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; Mybatis Plus 提供的 DynamicDataSource，这种用@DS注解的方式来实现的。减少了业务代码的入侵。&lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;它的源代码是怎么来实现的呢&lt;/font&gt;？支持的事务是怎么样的事务，如何支持分布式事务呢？&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&amp;gt; ShardingSphere 框架的使用。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;fontStyle=1;verticalAlign=top;align=left;fillColor=#f8cecc;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="1100" y="260" width="690" height="360" as="geometry" />
        </mxCell>
        <mxCell id="RwhGDpmJjXARNoensnjg-3" value="&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;ShardingSphere的介绍和使用：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;分为ShardingJDBC 客户端分库分表 和 ShardingProxy 服务端分库分表。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ShardingJDBC 支持各种数据库，需要在我们的程序里面去配置 数据源、各种分片策略等。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;ShardingProxy 目前只支持mysql、pgsql，是一个程序，可以看做是一个数据库，我们程序只需要连接它就行了，它自己的服务里面来弄这些复杂的配置。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;fontStyle=1;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="260" y="850" width="700" height="530" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
