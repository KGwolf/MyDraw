<mxfile host="app.diagrams.net" modified="2024-01-29T09:24:45.228Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="sJoBigr4mRZPHyj8_E6P" version="23.0.2" type="github">
  <diagram name="第 1 页" id="3uKooOr-jPmKd_cmfSqT">
    <mxGraphModel dx="4797" dy="2489" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="h9diVwNSZwyLOE3jBIlE-11" value="" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
          <mxGeometry x="-860" y="-10" width="4480" height="1260" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-1" value="单例模式：&lt;br&gt;&lt;div&gt;为什么要使用单例？单例存在哪些问题？单例与静态类的区别？有何替代的解决方案？&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;第一，有些情况使用new对象来操作可能会有并发问题，比如写日志，几个service里面单独new Log().write()，同一行写，&lt;span style=&quot;background-color: initial;&quot;&gt;那么可能就会覆盖日志。当然有锁的方式（分布式锁、jvm锁）来处理、或者塞入消息队列，但是更简单的还是单例来解决。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;第二，有些类就适合在整个程序里面存一份。比如配置类、工具类等等。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如何实现单例：&lt;/div&gt;&lt;div&gt;&lt;div&gt;构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例；&lt;/div&gt;&lt;div&gt;考虑对象创建时的线程安全问题；&lt;/div&gt;&lt;div&gt;考虑是否支持延迟加载；&lt;/div&gt;&lt;div&gt;考虑 getInstance() 性能是否高（是否加锁）。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.饿汉式单例：&lt;/div&gt;&lt;div&gt;&lt;div&gt;在类加载的时候，instance 静态实例就已经创建并初始化好&lt;span style=&quot;background-color: initial;&quot;&gt;了，所以，instance 实例的创建过程是线程安全的。缺点是不支持延迟加载（等需要用到的时候再进行创建对象）。但是延迟加载也不怎么需要，没卵用！&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;2.懒汉式单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;类加载的时候不进行初始化，在调用getInstance()方法的时候，才进行new对象操作。实现了延迟加载。缺点是方法上加了synchronized，并发度降低了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;3.双重检测锁单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;大体跟懒汉式一样，只是在获取实例的时候不一样，取消了方法上的sync，在方法内部进行了2次判断null。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;第一次判断，是为了不必要的同步代码块执行，解决了懒汉式的并发问题。第二次检测是为了避免多次&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;idea&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;中写双重检测锁，会给你提示，进行优化成静态内部类的方式。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;4.静态内部类单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;既做到了延迟加载，又做到了无锁实现线程安全，简洁性和可读性也比双检锁好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;5.枚举单例：利用枚举本身的特性，保证了实例的安全性和唯一性。可读性不好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;单例这种设计模式存在哪些问题？为什么会被称为反模式？如果&lt;span style=&quot;background-color: initial;&quot;&gt;不用单例，该如何表示全局唯一类？有何替代的解决方案？&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.单例对oop特性支持不友好。使用方式违背了基于接口而非实现的设计原则，也就违背了广义上理解的&lt;span style=&quot;background-color: initial;&quot;&gt;OOP 的抽象特性。如果未来某一天，我们希望针对不同的业务采用不同的 ID 生成算法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;比如，订单 ID 和用户 ID 采用不同的 ID 生成器来生成。为了应对这个需求变化，我们需要&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;修改所有用到 IdGenerator 类的地方，这样代码的改动就会比较大。&lt;/span&gt;单例对继承、多态特性的支持也不友好，可以实现，但看起来很怪。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.单例会隐藏类之间的依赖关系。单例类不需要显示创建、不需要依赖参数传递，在函数中直接调用&lt;span style=&quot;background-color: initial;&quot;&gt;就可以了。而我们有时候需要看这种依赖关系。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;3.单例对代码的扩展性不友好。&lt;/span&gt;如果未来某一天，我们需要在代码中创建两个实例&lt;span style=&quot;background-color: initial;&quot;&gt;或多个实例，那就要对代码有比较大的改动。比如，数据库连接池，刚开始肯定设计成1个，控制连接数量。后面可能有些sql查询慢，这样就占用连接久。如果设计成2个连接池，慢查询用1个，其它用1个。就不好改代码了。&lt;/span&gt;实际上，&lt;font color=&quot;#ff0000&quot;&gt;一些开源的数据库连接池、线程池也确实没有设&lt;/font&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;计成单例类&lt;/font&gt;。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;4.单例对代码的可测试性不友好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;5.单例不支持有参的构造函数。比如&lt;/span&gt;连接池的单例对象，我们没法通过参数来&lt;span style=&quot;background-color: initial;&quot;&gt;指定连接池的大小。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;替代的解决方案：类对象的全局唯一性可以通过多种不同的方式来保证。我们既可以通过单例模式来强&lt;span style=&quot;background-color: initial;&quot;&gt;制保证，也可以通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证，还可以通过程&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;序员自己来保证（自己在编写代码的时候自己保证不要创建两个类对象）。&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-790" y="50" width="1050" height="1150" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-3" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonEHan&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;饿汉式单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性在类加载进内存的时候就被初始化了，类加载不存在线程安全问题。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;final&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示只能在类加载或者构造函数里面进行赋值，不允许其它地方修改。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonEHan {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonEHan&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final static &lt;/span&gt;MySingletonEHan &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonEHan()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public static &lt;/span&gt;MySingletonEHan &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="290" y="50" width="770" height="630" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-4" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonLanHan&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;懒汉式单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性不进行初始化，在进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法调用的时候才进行初始化，实现懒加载。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性只设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;为什么要在方法上面加&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;synchronized&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;呢？因为多线程并发的时候，会出现多次&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的情况。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;但是方法上面加&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;synchronized &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;会不会有效率问题？ 锁不够细化？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonLanHan {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonLanHan&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static &lt;/span&gt;MySingletonLanHan &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public synchronized static &lt;/span&gt;MySingletonLanHan &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonLanHan()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1090" y="50" width="730" height="690" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-5" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonDoubleLock&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;双重检测锁单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性不进行初始化，在进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法调用的时候才进行初始化，实现懒加载。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性只设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;为什么要进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;次检测&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;呢？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;第一次判断，是为了不必要的同步代码块执行，解决了懒汉式的并发问题。第二次检测是为了避免多次&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;在&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;idea&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;中写双重检测锁，会给你提示，进行优化成静态内部类的方式。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonDoubleLock {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonDoubleLock&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static &lt;/span&gt;MySingletonDoubleLock &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public static &lt;/span&gt;MySingletonDoubleLock &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;synchronized &lt;/span&gt;(MySingletonDoubleLock.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;){&lt;br&gt;                &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;                    &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonDoubleLock()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;                &lt;/span&gt;}&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1900" y="50" width="820" height="790" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-6" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonInnerClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;内部静态类单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;既做到了延迟加载，又做到了无锁实现线程安全，简洁性和可读性也比双检锁好&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonInnerClass {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonInnerClass&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static final class &lt;/span&gt;InstanceHolder {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;static final &lt;/span&gt;MySingletonInnerClass &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonInnerClass()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;MySingletonInnerClass &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;InstanceHolder.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="2840" y="50" width="700" height="640" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-7" value="&lt;div&gt;如果项目中已经用了很多单例模式，我们该如何在尽量减少代码改&lt;span style=&quot;background-color: initial;&quot;&gt;动的情况下，通过重构代码来提高代码的可测试性呢？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;把代码“User cachedUser = CacheManager.getInstance().getUser(userId);”单独&lt;span style=&quot;background-color: initial;&quot;&gt;提取出来做成一个单独的函数，这样这个函数就可以进行mock了，进而方便测试validate&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CachedUser&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="300" y="860" width="670" height="220" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-8" value="&lt;div&gt;我们所说的单例，是进程内的实例唯一，那么线程内的单例怎么做呢？&lt;/div&gt;&lt;div&gt;用ThreadLocal可以实现，底层是hashmap。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如何实现集群间的单例呢？分布式锁不就实现了么。。。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如何实现一个多例模式呢？&lt;/div&gt;&lt;div&gt;&lt;div&gt;“多例”指的就是一个类可以创建多个&lt;span style=&quot;background-color: initial;&quot;&gt;对象，但是个数是有限制的，比如只能创建 3 个对象。多例的实现也比较简单，通过一个&lt;/span&gt;Map 来存储对象类型和对象之间的对应关系，来控制对象的个数。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1060" y="860" width="670" height="220" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-9" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;对于 Java 语言来说，单例类&lt;span style=&quot;background-color: initial;&quot;&gt;对象的唯一性的作用范围并非进程，而是类加载器（Class Loader）&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontSize=18;" parent="1" vertex="1">
          <mxGeometry x="340" y="740" width="830" height="90" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-10" value="工厂模式：&lt;br&gt;简单工厂、工厂方法和抽象工厂&lt;br&gt;&lt;br&gt;&lt;div&gt;当创建对象的逻辑比较复杂（1.很多ifelse判断。2.单个对线创建就很多逻辑，需要赋值很多。），是一个“大工程”的时候，我们就考虑使用工厂模式，封装对象的创&lt;span style=&quot;background-color: initial;&quot;&gt;建过程，将对象的创建和使用相分离。&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;尽管简单工厂模式的代码实现中，有多处 if 分支判断逻辑，违背开闭原则，但&lt;span style=&quot;background-color: initial;&quot;&gt;权衡扩展性和可读性，这样的代码实现在大多数情况下（比如，不需要频繁地添加&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;判断分支）是没有问题的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;工厂方法模式：&lt;/span&gt;有些类的创建过程很复杂，需要很多赋值，写到一起就很多，优化代码就成了工厂方法。抽象出1个工厂接口，然后每个ifelse都有1个单独的工厂类，实现接口。但是！！使用的时候还是会有那些iflese存在。解决办法我们可以为工厂类再创建一个简单工厂，也就是工厂的工厂，用来创建工厂类对象。利用hashmap来消除ifelse。&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;抽象工厂：简单工厂和工厂方法都是针对1个类型的类进行创建，如果针对多个类型的类进行创建，就用抽象工厂，一个接口里面有多个创建类的方法。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;当每个对象的创建逻辑都比较简单的时候，推荐使用简单工厂模式，将&lt;span style=&quot;background-color: initial;&quot;&gt;多个对象的创建逻辑放到一个工厂类中。当每个对象的创建逻辑都比较复杂的时候，为了避&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;免设计一个过于庞大的简单工厂类，推荐使用工厂方法模式，将创建对象和使用对象进行分离，让代码更加清晰，将创建逻辑拆分得更细，每&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;个对象的创建逻辑独立到各自的工厂类中。&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;工厂模式的作用：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。&lt;/div&gt;&lt;div&gt;代码复用：创建代码抽离到独立的工厂类之后可以复用。&lt;/div&gt;&lt;div&gt;隔离复杂性：封装复杂的创建逻辑，调用者无需了解如何创建对象。&lt;/div&gt;&lt;div&gt;控制复杂度：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;实际上，简单工厂模式还叫作静态工厂方法模式（Static Factory Method Pattern）。&lt;span style=&quot;background-color: initial;&quot;&gt;之所以叫静态工厂方法模式，是因为其中创建对象的方法是静态的。那为什么要设置成&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;静态的呢？设置成静态的，在使用的时候，是否会影响到代码的可测试性呢？&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-810" y="1390" width="1060" height="680" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-12" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.factory&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;SimplyFactory&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;简单工厂，根据不同的配置来&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;出不同的类型&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 15:58&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;SimplyFactory {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;IRuleConfigParser &lt;span style=&quot;color:#ffc66d;&quot;&gt;createParser&lt;/span&gt;(String configFormat) {&lt;br&gt;        IRuleConfigParser parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;json&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;JsonRuleConfigParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;xml&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;XmlRuleConfigParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;yaml&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;YamlRuleConfigParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;properties&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;PropertiesRuleConfigParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;parser&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="320" y="1400" width="630" height="520" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-13" value="创建型设计模式：单例、工厂、构造者、原型模式。 这些都是创建对象有关的。创建型模式主要解决对象的创建问题，封&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;装复杂的创建过程，解耦对象的创建代码和使用代码。&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-610" y="-320" width="670" height="220" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-14" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.factory.factorymethod&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;IRuleConfigParserFactory&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 16:57&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;IRuleConfigParserFactory {&lt;br&gt;    IRuleConfigParser &lt;span style=&quot;color:#ffc66d;&quot;&gt;createParser&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.factory.factorymethod&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.HashMap&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.Locale&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.Map&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;JsonRuleConfigParserFactory&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 17:00&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;JsonRuleConfigParserFactory &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;IRuleConfigParserFactory{&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;IRuleConfigParser &lt;span style=&quot;color:#ffc66d;&quot;&gt;createParser&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return new &lt;/span&gt;JsonRuleConfigParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里需要得到&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;IRuleConfigParser,&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;还是有一堆的&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;if else!!!!!!&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;IRuleConfigParser parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;json&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;JsonRuleConfigParserFactory().createParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;xml&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;XmlRuleConfigParserFactory().createParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;yaml&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;JsonRuleConfigParserFactory().createParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;} &lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;properties&quot;&lt;/span&gt;.equalsIgnoreCase(configFormat)) {&lt;br&gt;            parser = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;PropertiesRuleConfigParserFactory().createParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;再引入&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;RuleConfigParserFactoryMap&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;parser = RuleConfigParserFactoryMap.&lt;span style=&quot;font-style:italic;&quot;&gt;getParserFactory&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;json&quot;&lt;/span&gt;).createParser()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public  class &lt;/span&gt;RuleConfigParserFactoryMap{&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;private static final &lt;/span&gt;Map&amp;lt;String&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;IRuleConfigParserFactory&amp;gt; &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;HashMap&amp;lt;&amp;gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        static &lt;/span&gt;{&lt;br&gt;            &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;JsonRuleConfigParserFactory())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;xml&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;XmlRuleConfigParserFactory())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;yaml&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;YamlRuleConfigParserFactory())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;PropertiesRuleConfigParserFactory())&lt;br&gt;        }&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;IRuleConfigParserFactory &lt;span style=&quot;color:#ffc66d;&quot;&gt;getParserFactory&lt;/span&gt;(String type) {&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(type == &lt;span style=&quot;color:#cc7832;&quot;&gt;null &lt;/span&gt;|| type.isEmpty()) {&lt;br&gt;                &lt;span style=&quot;color:#cc7832;&quot;&gt;return null;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;}&lt;br&gt;            IRuleConfigParserFactory parserFactory = &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;cachedFactories&lt;/span&gt;.get(type.toLowerCase(Locale.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;ROOT&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            return &lt;/span&gt;parserFactory&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1170" y="1400" width="860" height="1300" as="geometry" />
        </mxCell>
        <mxCell id="fvTyMGF2L9mwG_t9CQHD-1" value="工厂模式和依赖注入容器DI的关联：&lt;br&gt;DI底层容器就是基于工厂模式的。一个简单的 DI 容器的核心功能一般有三个：配置解析、对象创建和对象生命周期管理。&lt;br&gt;&lt;br&gt;实现一个最小模型的DI框架：" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-810" y="2090" width="1060" height="680" as="geometry" />
        </mxCell>
        <mxCell id="fvTyMGF2L9mwG_t9CQHD-2" value="建造者模式：&lt;br&gt;&lt;br&gt;用途：&lt;br&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;复杂对象的构建：当一个对象包含多个组件或部分，并且它们的组合方式可能变化时，可以使用建造者模式。这有助于将构建过程分解为可管理的步骤。&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;避免重叠构造器模式：当类有多个属性，而且可能有多个构造器组合，使用建造者模式可以避免创建多个构造器的问题。&lt;br&gt;&lt;br&gt;配置对象的构建：当需要通过设置多个参数或选项来构建对象时，建造者模式提供了更清晰的接口，避免了长参数列表的问题&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;直接使用构造函数或者配合 set 方法就能创建对象，为什么还需要建造者模式来创建呢？建造者模式和工厂模式都可以创建对象，那它们两个的区别在哪里呢？&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如果构造函数的参数过多，代码在可读性和易用性上都会变差。在使用构造函数的时候，我们就容易搞错各参数的顺序，传递进错误的参数值，导致非常隐蔽的 bug。&lt;span style=&quot;font-size: 12pt; color: rgb(98, 151, 85); font-style: italic; font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;font-family: 宋体, monospace; font-size: 12pt; color: rgb(98, 151, 85); font-style: italic;&quot;&gt;方法，也是参数多了之后写一大片，而且有些&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; color: rgb(98, 151, 85); font-style: italic; font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;font-family: 宋体, monospace; font-size: 12pt; color: rgb(98, 151, 85); font-style: italic;&quot;&gt;属性还不提供出来，不允许被外界修改。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;。那还有其他问题：&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.如果有需求，new对象的时候，有参数是必填的，如果这种参数多了，也会出现上面的问题。&lt;/div&gt;&lt;div&gt;2.如果类的属性之间有一定的依赖关系或者约束条件，我们继续使用构造函数配合 set() 方法的设计思路，那这些依赖关系或约束条件的校验逻辑就无处安放了。&lt;/div&gt;&lt;div&gt;3.如果我们希望创建不可变对象，也就是说，对象在创建好之后，就不能再修改内部的属性值，要实现这个功能，我们就不能在类中暴露 set() 方法。构造函数配合 set() 方法来设置属性值的方式就不适用了。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;出现上面的3个问题，就可以考虑使用建造者模式了。。。。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如何写建造者模式：1.内部静态类方式，lombok就是这种。2.单独提出来一个类。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。建造者模式是用来创建一种类型的复杂对象，通过设置不同的可选参数，“定制化”地创建不同的对象。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Lombok的@Builder能实现构造者模式。&lt;/div&gt;&lt;div&gt;当使用 &lt;code&gt;@Builder&lt;/code&gt; 注解时，Lombok会生成一个与目标类对应的建造者类。该建造者类具有与目标类相同的字段，并包含链式调用的方法来设置这些字段的值。生成的建造者类通常会命名为类名后面加上 &quot;Builder&quot;，例如 &lt;code&gt;PersonBuilder&lt;/code&gt;。&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-710" y="2950" width="1070" height="750" as="geometry" />
        </mxCell>
        <mxCell id="fvTyMGF2L9mwG_t9CQHD-3" value="原型模式：&lt;br&gt;&lt;div&gt;如果对象的创建成本比较大，而同一个类的不同对象之间差别不大（大部分字段都相同），在这种情况下，我们可以利用对已有对象（原型）进行复制（或者叫拷贝）的方式来创建新对象，以达到节省创建时间的目的。这种基于原型来创建对象的方式就叫作原型设计模式（Prototype Design Pattern），简称原型模式。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;如果对象中的数据需要经过复杂的计算才能得到（比如排序、计算哈希值），或者需&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;要从 RPC、网络、数据库、文件系统等非常慢速的 IO 中读取，这种情况下，我们就可以利&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;用原型模式，从其他已有对象中直接拷贝得到，而不用每次在创建新对象的时候，都重复执&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;行这些耗时的操作。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;比如，我们数据库表里面存了各种搜索关键字的数据，keyword，times，datetime。 系统初始化的时候加载到内存一个HashMap里面，方便前端做展示或者内部查询。但是如果表里面的数据变化了（可能由其他系统进行更新操作），我们内存里面的数据需要跟着变化（固定30分钟进行读库处理），这时候，如果提出需求，内存里面的数据要么全是更新前的，要么全部是更新后的，不能有中间状态的数据（查询出来，for循环赋值期间，不是原子性更新整个HashMap，就有中间状态的数据）。这时候就可以用到原型模式，拷贝出来一个对象，修改完成之后，再赋值成原来的对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;原型模式的实现方式：深拷贝和浅拷贝 。&lt;/div&gt;&lt;div&gt;浅拷贝：java的object.clone()。&lt;/div&gt;&lt;div&gt;深拷贝：1.递归拷贝对象、对象的引用对象以及引用对象的引用对象……直到要拷贝的对&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;象只包含基本数据类型数据，没有引用对象为止。2.&lt;/span&gt;先将对象序列化，然后再反序列化成新的对象。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;上面说的2中深拷贝都比较耗时间空间。针对hashmap的高效率深拷贝：可以先进行浅拷贝成obj2，然后查询出需要修改的数据，遍历删除obj2的对应数据（应该是删掉了引用），然后put新数据进去。完成之后，重新赋值老hashmap即可。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;copyonwrite是不是这种类似原理？&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; font-size: 12.7559pt; font-family: 微软雅黑; color: rgb(53, 53, 53);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="2220" y="2880" width="1060" height="680" as="geometry" />
        </mxCell>
        <mxCell id="fvTyMGF2L9mwG_t9CQHD-4" value="代理模式：&lt;br&gt;&lt;div&gt;它在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。代理在RPC、缓存、监控、日志等场景中的应用 较多。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;静态代理、动态代理：常用在业务系统中开发一些非功能性需求，日志等。单一职责原则，一个方法里面干一件事就行了。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;静态代理：&lt;/div&gt;&lt;div&gt;基于接口实现：如果可以改动代码，可以抽象出来1个接口，接口方法就是需要被代理的那些方法。让原始类实现方法。新增一个代理类，同样实现代理接口，并且含有1个原始类的属性，这个属性可以在构造参数里面注入。&lt;/div&gt;&lt;div&gt;这里定义一个接口，实现了基于接口而非实现编程的思想。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;基于继承实现：如果原始类并没有定义接口，并且原始类代码并不是我们开发维护的（比如它来自一个&lt;span style=&quot;background-color: initial;&quot;&gt;第三方的类库），我们也没办法直接修改原始类，给它重新定义一个接口。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;动态代理：&lt;/div&gt;&lt;div&gt;静态代理，如果需要代理的类很多，那要写N多个代理类。&lt;/div&gt;&lt;div&gt;&lt;div&gt;我们不&lt;span style=&quot;background-color: initial;&quot;&gt;事先为每个原始类编写代理类，而是在运行的时候，动态地创建原始类对应的代理类，然后&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;在系统中用代理类替换掉原始类。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Spring AOP是怎样实现的？&lt;/div&gt;&lt;div&gt;&lt;div&gt;Spring AOP 底层的实现原理就是基于动态代理。用户配置好需要给哪些类创建&lt;span style=&quot;background-color: initial;&quot;&gt;代理，并定义好在执行原始类的业务代码前后执行哪些附加功能。Spring 为这些类创建动&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;态代理对象，并在 JVM 中替代原始类对象。原本在代码中执行的原始类的方法，被换作执&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;行代理类的方法，也就实现了给原始类添加附加功能的目的。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;实际上，RPC 框架也可以看作一种代理模式。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;AOP缓存，请求参数一样，不用执行业务逻辑，直接返回。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-740" y="4360" width="1060" height="680" as="geometry" />
        </mxCell>
        <mxCell id="fvTyMGF2L9mwG_t9CQHD-5" value="&lt;div&gt;结构型模式主要总结了一&lt;span style=&quot;background-color: initial; font-size: 12.7559pt; font-family: 微软雅黑; color: rgb(53, 53, 53);&quot;&gt;些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。结构型&lt;/span&gt;&lt;span style=&quot;background-color: initial; color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt;&quot;&gt;模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;式。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-710" y="4050" width="750" height="130" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-1" value="消除ifelse的方式：hashmap、反射" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;align=left;verticalAlign=top;" parent="1" vertex="1">
          <mxGeometry x="-1260" y="1600" width="300" height="70" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-3" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.builder&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MyBuilder&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;java&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;内部内实现构造者模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;如果不用构造模式，原来类的构造方法和&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法不行么？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;如果参数多了，构造方法对调用者不友好。&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法，也是参数多了之后写一大片，而且有些&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性还不提供出来。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;优势：想组合哪些字段来构成类，可以自由选择。把创建类的逻辑隔离出去。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;（比如&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;pr&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;里面的报表头对象，不同的报表列需要初始化的字段不同，可以选择构造模式）&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 10:46&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MyBuilderInnerClass {&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;注意，这个类里面的属性不提供&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MyBuilderInnerClass&lt;/span&gt;(Builder builder) {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;name &lt;/span&gt;= builder.&lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;age &lt;/span&gt;= builder.&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;getName&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;getAge&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里用了内部静态类实现构造者模式，如果其它语言不支持这种，怎么做呢？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public static class &lt;/span&gt;Builder {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        private final int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;DEFAULT_MAX_NAME_LENGTH &lt;/span&gt;= &lt;span style=&quot;color:#6897bb;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;         * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;构造者类里面的属性不提供&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法，且&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;set&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法返回构造者实例。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;         &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;Builder &lt;span style=&quot;color:#ffc66d;&quot;&gt;setName&lt;/span&gt;(String name) {&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里也可以判断格式对不对&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(name.length() &amp;gt; &lt;span style=&quot;color:#9876aa;&quot;&gt;DEFAULT_MAX_NAME_LENGTH&lt;/span&gt;) {&lt;br&gt;                &lt;span style=&quot;color:#cc7832;&quot;&gt;throw new &lt;/span&gt;IllegalArgumentException(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;name&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;长度超标&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;}&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;name &lt;/span&gt;= name&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            return this;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;Builder &lt;span style=&quot;color:#ffc66d;&quot;&gt;setAge&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;age) {&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;age &lt;/span&gt;= age&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            return this;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;MyBuilderInnerClass &lt;span style=&quot;color:#ffc66d;&quot;&gt;build&lt;/span&gt;() {&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里可以写额外的逻辑去判断是否赋值了。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(&lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;)) {&lt;br&gt;                &lt;span style=&quot;color:#cc7832;&quot;&gt;throw new &lt;/span&gt;IllegalArgumentException(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;name&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;未赋值&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;}&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;return new &lt;/span&gt;MyBuilderInnerClass(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="550" y="2900" width="880" height="1290" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-4" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;MyBuilderInnerClass build = new MyBuilderInnerClass.Builder().setName(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;222&quot;&lt;/span&gt;).setAge(&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;).build()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="580" y="4160" width="800" height="20" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-5" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.builder&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MyBuilderOutClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 13:53&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MyOutClass {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;getName&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;getAge&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MyOutClass&lt;/span&gt;(MyOutClassBuilder builder){&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;name &lt;/span&gt;= builder.getName()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;age &lt;/span&gt;= builder.getAge()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.builder&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MyOutClassBuilder&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 14:03&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public  class &lt;/span&gt;MyOutClassBuilder {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;getName&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public int &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;getAge&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;MyOutClassBuilder &lt;span style=&quot;color:#ffc66d;&quot;&gt;setName&lt;/span&gt;(String name) {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;name &lt;/span&gt;= name&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return this;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;MyOutClassBuilder &lt;span style=&quot;color:#ffc66d;&quot;&gt;setAge&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;age) {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;age &lt;/span&gt;= age&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return this;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;MyOutClass &lt;span style=&quot;color:#ffc66d;&quot;&gt;build&lt;/span&gt;(){&lt;br&gt;      &lt;span style=&quot;color:#cc7832;&quot;&gt;return  new &lt;/span&gt;MyOutClass(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1480" y="2900" width="530" height="1300" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-6" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;MyOutClassBuilder build1 = new MyOutClassBuilder()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;MyOutClass obj2 = build1.setAge(&lt;span style=&quot;color:#6897bb;&quot;&gt;1&lt;/span&gt;).setName(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;1122&quot;&lt;/span&gt;).build()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="1480" y="4120" width="500" height="50" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-7" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.proxy.staticproxy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MyStaticClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;原始类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 15:06&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MyStaticClass &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;IMyStaticClass {&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     *  &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;如果需要获取打印这个方法的执行时间、请求参数、返回内容等信息，怎么做？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doMyStage&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;从数据库获取数据、处理、赋值&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;从数据库获取数据、处理、赋值&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.proxy.staticproxy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;IMyStaticClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;代理接口&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 15:14&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;IMyStaticClass {&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;代理接口方法&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doMyStage&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="430" y="4360" width="660" height="820" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-8" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.proxy.staticproxy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MyStaticClassProxy&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;代理类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;主要是为了实现单一职责，记日志这些逻辑不适合跟主业务逻辑混合到一起&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里不抽象出一个接口不行吗&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/24 15:33&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MyStaticClassProxy  &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;IMyStaticClass{&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final &lt;/span&gt;MyStaticClass &lt;span style=&quot;color:#9876aa;&quot;&gt;myStaticClass&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MyStaticClassProxy&lt;/span&gt;(MyStaticClass c1){&lt;br&gt;        &lt;span style=&quot;color:#9876aa;&quot;&gt;myStaticClass &lt;/span&gt;= c1&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doMyStage&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;做代理的逻辑，比如记录执行时间，记录入参和返回结果。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;记录请求参数&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;myStaticClass&lt;/span&gt;.doMyStage()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;记录返回结果&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;做代理的逻辑，比如记录执行时间，记录入参和返回结果。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;IMyStaticClass myc1 = new MyStaticClassProxy(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MyStaticClass())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;myc1.doMyStage()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1111" y="4360" width="570" height="600" as="geometry" />
        </mxCell>
        <mxCell id="PeWg4AiwFO6YCsHLee7R-9" value="桥接模式：&lt;br&gt;&lt;div&gt;对于这个模式有两种不同的理解方式。在 GoF 的《设计模式》一书中，桥接模式被定义&lt;span style=&quot;background-color: initial;&quot;&gt;为：“将抽象和实现解耦，让它们可以独立变化。”在其他资料和书籍中，还有另外一种更&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;加简单的理解方式：“一个类存在两个（或多个）独立变化的维度，我们通过组合的方式，&lt;/span&gt;&lt;/div&gt;&lt;div&gt;让这两个（或多个）维度可以独立进行扩展。”。通&lt;span style=&quot;background-color: initial;&quot;&gt;过组合关系来替代继承关系，避免继承层次的指数级爆炸。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;桥接模式常常用于处理&lt;font color=&quot;#ff0000&quot;&gt;一个类有两个或更多独立变化的维度的情况&lt;/font&gt;。例如，一个图形可以根据颜色和形状进行变化。&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;在不使用桥接模式的情况下，为了支持两个维度的扩展，可能需要创建多个子类的组合，会组合爆炸。&lt;br&gt;&lt;br&gt;&lt;br&gt;2个变化的维度，抽象出来2个接口，或者抽象类，使用组合的方式让他们连接起来（桥接）。&lt;br&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-730" y="5250" width="1060" height="290" as="geometry" />
        </mxCell>
        <mxCell id="sCLwV2QDZWm7Fu5_kib5-1" value="装饰器模式：&lt;br&gt;&lt;br&gt;java IO类库就是用装饰器模式来实现的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;FilterInputStream 存在的意义：代码重用而已。BufferedInputStream和DataInputStream都需要调用in.read()等等其它的父类方法。&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;装饰器模式主要解决继承关系过于复杂的问题，通过组合来替代继承。它主要的作用是给原始类添加增强功能。这也是判断是否该用装饰器模式的一个重要的依据。除此之外，装饰器模式还有一个特点，那就是可以对原始类嵌套使用多个装饰器。为了满足这个应用场景，在&lt;/div&gt;&lt;div&gt;设计的时候，装饰器类需要跟原始类继承相同的抽象类或者接口。&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;跟代理模式的区别：&lt;br&gt;&lt;div&gt;装饰器类是对功能的增强，那代理模式也有这种效果，在代理模式中，代理类附加的是跟原始类无关的功能，而在装饰器模式中，装饰器类附加的是跟原始类相关的增强功能。&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;装饰者模式给 InputStream 添加缓存读取数据功能。那对于“添加缓存”这个应用场景来说，我们到底是该用代理模式还是装饰器模式呢？&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;装饰器模式注重功能的动态组合，而代理模式注重对对象访问的控制。&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;对于添加缓存这个应用场景使用哪种模式，要看设计者的意图，如果设计者不需要用户关注是否使用缓存功能，要隐藏实现细节，也就是说用户只能看到和使用代理类，那么就使用proxy模式；反之，如果设计者需要用户自己决定是否使用缓存的功能，需要用户自己新建原始对象并动态添加缓存功能，那么就使用decorator模式。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Decorator关注为对象动态的添加功能, Proxy关注对象的信息隐藏及访问控制.Decorator体现多态性, Proxy体现封装性.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-720" y="6250" width="1060" height="680" as="geometry" />
        </mxCell>
        <mxCell id="0l-d6NYCbHXYMjrSkt74-1" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.birdge&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;NotifyDoctor&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知医生类，面向过程的写法，也是我们开发中常用的&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知类型，警示级别。  不同的警示级别给出不同的通知类型&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这种写法很简单，也有很多问题：&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 1.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;违反了单一职责原则，每个通知的方法，其实比较复杂的，比如调用微信接口。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 2.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;违反了开闭原则，增加&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;个类型需要修改这个代码。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 3.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;强耦合，警告类型和通知类型强耦合。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;重构&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;:&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * 1.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;针对可能扩展的、有变化的点抽象出来接口：&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;INotifyWays&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;、&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;IWarningType&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/25 9:46&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;NotifyDoctor {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notify&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;warningType){&lt;span style=&quot;color:#808080;&quot;&gt;//String notifyType,&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(warningType == &lt;span style=&quot;color:#6897bb;&quot;&gt;1&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;黑灯 微信通知&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;weiXinNotify()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(warningType == &lt;span style=&quot;color:#6897bb;&quot;&gt;2&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;红灯  邮箱通知&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;youXiangNotify()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(warningType == &lt;span style=&quot;color:#6897bb;&quot;&gt;3&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;橙灯&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;  his&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;hisNotify()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if &lt;/span&gt;(warningType == &lt;span style=&quot;color:#6897bb;&quot;&gt;4&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;黄灯&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;   pr&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;im&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;            &lt;/span&gt;prImNotify()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;weiXinNotify&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;微信通知&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;youXiangNotify&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;邮箱通知&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;hisNotify&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;his&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;prImNotify&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;pr&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;im&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;通知&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="430" y="5245" width="660" height="885" as="geometry" />
        </mxCell>
        <mxCell id="0l-d6NYCbHXYMjrSkt74-3" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.birdge&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;IWarningType&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/25 11:13&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;IWarningType {&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * applyWarningType&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;applyWarningType&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.birdge&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;INotifyWays&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/25 10:35&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;INotifyToDoctor {&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * notify&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notifyToDoctor&lt;/span&gt;(IWarningType warningType)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1125" y="5245" width="425" height="635" as="geometry" />
        </mxCell>
        <mxCell id="0l-d6NYCbHXYMjrSkt74-4" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.birdge&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;YouXiangNotify&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt;TODO&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#a8c023;font-style:italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/25 10:45&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;YouXiangNotify &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;INotifyToDoctor{&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notifyToDoctor&lt;/span&gt;(IWarningType warningType) {&lt;br&gt;        warningType.applyWarningType()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;邮箱通知医生&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1585" y="5245" width="495" height="635" as="geometry" />
        </mxCell>
        <mxCell id="0l-d6NYCbHXYMjrSkt74-5" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.birdge&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;NotifyDoctor2&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;重构&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;NotifyDoctor&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/25 10:47&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;NotifyDoctor2 {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;INotifyToDoctor &lt;span style=&quot;color:#9876aa;&quot;&gt;notifyToDoctor&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;IWarningType &lt;span style=&quot;color:#9876aa;&quot;&gt;warningType&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;NotifyDoctor2&lt;/span&gt;(INotifyToDoctor notifyToDoctor&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;IWarningType warningType) {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;notifyToDoctor &lt;/span&gt;= notifyToDoctor&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;warningType &lt;/span&gt;= warningType&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notifyTd&lt;/span&gt;() {&lt;span style=&quot;color:#808080;&quot;&gt;//String notifyType,&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;notifyToDoctor&lt;/span&gt;.notifyToDoctor(&lt;span style=&quot;color:#9876aa;&quot;&gt;warningType&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;即使这里还是有很多&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;判断，但是&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;里面的逻辑已经被抽离出去了。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;NotifyDoctor2 d = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;NotifyDoctor2(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;WeiXinNotify()&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;HeiDengWarningType())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;d.notifyTd()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="2150" y="5240" width="740" height="670" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-1" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;//&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;底层是&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;NIO&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的方式&lt;br&gt;&lt;/span&gt;InputStream input = Files.&lt;span style=&quot;font-style:italic;&quot;&gt;newInputStream&lt;/span&gt;(Paths.&lt;span style=&quot;font-style:italic;&quot;&gt;get&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/user/wangzheng/test.txt&quot;&lt;/span&gt;))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;底层是&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;BIO&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的方式&lt;br&gt;&lt;/span&gt;InputStream in = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;FileInputStream(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/user/wangzheng/test.txt&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;InputStream bin = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;BufferedInputStream(in)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;byte&lt;/span&gt;[] data = &lt;span style=&quot;color:#cc7832;&quot;&gt;new byte&lt;/span&gt;[&lt;span style=&quot;color:#6897bb;&quot;&gt;128&lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;while &lt;/span&gt;(bin.read(data) == &lt;span style=&quot;color:#6897bb;&quot;&gt;1&lt;/span&gt;){&lt;br&gt;    System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="407.5" y="6250" width="695" height="220" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-3" value="适配器模式：&lt;br&gt;&lt;div&gt;适配器模式是用来做适配，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容&lt;span style=&quot;background-color: initial;&quot;&gt;而不能一起工作的类可以一起工作。&lt;/span&gt;&lt;/div&gt;类适配器和对象适配器。类适配器使用继承关系来实现，对象适配器使用组合关系来实现。&lt;br&gt;&lt;br&gt;&lt;br&gt;适配器模式可以看作一种“补偿模式”，用来补救设计上的缺陷。&lt;br&gt;&lt;br&gt;1.封装有缺陷的接口、类设计。比如含有大量静态方法，影响测试性。&lt;br&gt;&lt;br&gt;2.统一多个类的接口设计。某个功能的实现依赖多个外部系统（或者说类）。通过适配器模式，将它们的接口适配为统&lt;span style=&quot;background-color: initial;&quot;&gt;一的接口定义，然后我们就可以使用多态的特性来复用代码逻辑。&lt;/span&gt;&lt;br&gt;&lt;br&gt;3.替换依赖的外部系统。当我们把项目中依赖的一个外部系统替换为另一个外部系统的时候，利用适配器模式，可以&lt;span style=&quot;background-color: initial;&quot;&gt;减少对代码的改动。&lt;/span&gt;&lt;br&gt;&lt;br&gt;4.兼容老版本接口。在做版本升级的时候，对于一些要废弃的接口，我们不直接将其删除，而是暂时保留，并且&lt;span style=&quot;background-color: initial;&quot;&gt;标注为 deprecated，并将内部实现逻辑委托为新的接口实现。&lt;/span&gt;&lt;br&gt;&lt;br&gt;5.适配不同格式的数据。比如，把从不同征信系统拉取的不同格式的征信数据，统一为相同的格式，以方&lt;span style=&quot;background-color: initial;&quot;&gt;便存储和使用。再比如，Java 中的 Arrays.asList() 也可以看作一种数据适配器，将数组类&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;型的数据转化为集合容器类型。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;br&gt;Slf4j 日志框架：&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;它相当于 JDBC 规范，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;提供了一套打印日志的统一接口规范。不过，它只定义了接口，并没有提供具体的实现，需&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;要配合其他日志框架（log4j、logback……）来使用。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;Slf4j 的出现晚于 JUL、JCL、log4j 等日志框架，所以，这些日志框架也不可能&lt;span style=&quot;background-color: initial;&quot;&gt;牺牲掉版本兼容性，将接口改造成符合 Slf4j 接口规范。Slf4j 也事先考虑到了这个问题，所&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;以，它不仅仅提供了统一的接口定义，还提供了针对不同日志框架的适配器。对不同日志框&lt;/span&gt;&lt;/div&gt;&lt;div&gt;架的接口进行二次封装，适配成统一的 Slf4j 接口定义。&lt;/div&gt;&lt;div&gt;&lt;div&gt;在开发业务系统或者开发框架、组件的时候，我们统一使用 Slf4j 提供的接口来编写&lt;span style=&quot;background-color: initial;&quot;&gt;打印日志的代码，具体使用哪种日志框架实现（log4j、logback……），是可以动态地指定&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;的（使用 Java 的 SPI 技术），只需要将相应的 SDK 导&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;入到项目中即可。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-710" y="7010" width="1060" height="720" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-4" value="代理、桥接、装饰器、适配器 4 种设计模式的区别：&lt;br&gt;&lt;br&gt;&lt;div&gt;它们都可以称为 Wrapper 模式，也就是通过 Wrapper 类二次封&lt;span style=&quot;background-color: initial;&quot;&gt;装原始类。&lt;/span&gt;尽管代码结构相似，但这 4 种设计模式的用意完全不同，也就是说要解决的问题、应用场&lt;span style=&quot;background-color: initial;&quot;&gt;景不同，这也是它们的主要区别。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;代理模式：代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是&lt;span style=&quot;background-color: initial;&quot;&gt;控制访问，而非加强功能，这是它跟装饰器模式最大的不同。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;桥接模式：桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相&lt;span style=&quot;background-color: initial;&quot;&gt;对独立地加以改变。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;装饰器模式：装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持&lt;span style=&quot;background-color: initial;&quot;&gt;多个装饰器的嵌套使用。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;适配器模式：适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理&lt;span style=&quot;background-color: initial;&quot;&gt;模式、装饰器模式提供的都是跟原始类相同的接口。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="440" y="6560" width="1050" height="356" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-5" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.adaptor&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;OldMyClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;适配器模式   这是别人提供不可修改的一个类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;适配的是哪&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;个角色？外部提供内，和我们自定义一个接口（供我们内部调用）&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;有以下几个问题：&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 1.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;静态方法，影响单元测试。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 2.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;需要多个系统的相似功能的类，统一接口名字。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 3.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这个类作为外部接口需要被另外的外部接口替换（比如从美康替换成其它厂商），或者内部的老接口需要保留&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 4.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;需要对返回值做统一的处理。（比如这里方法返回的是&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xml&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;字符串格式的，我们需要的是&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;json&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;字符串格式）&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/26 14:41&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;OldMyClass {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;readFromOld&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;OldMyClass&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;read&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法。&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&amp;lt;xml&amp;gt;1&amp;lt;/xml&amp;gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;writeFromOld&lt;/span&gt;(){&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;OldMyClass&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;write&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法。&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&amp;lt;xml&amp;gt;2&amp;lt;/xml&amp;gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="450" y="7010" width="830" height="540" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-6" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.adaptor&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;IAdaptor&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;抽象接口&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/26 14:41&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;IAdaptor {&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;读方法&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;read&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;写方法&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*/&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;write&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1350" y="7010" width="270" height="420" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-7" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.adaptor&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;ClassAdaptor&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;供我们自己系统内部使用的接口实现类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/26 14:41&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ClassAdaptor &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;IAdaptor {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;OldMyClass &lt;span style=&quot;color:#9876aa;&quot;&gt;oldMyClass&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/***&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@param &lt;/span&gt;&lt;span style=&quot;color:#8a653b;font-style:italic;&quot;&gt;oldMyClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#8a653b;font-style:italic;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@return&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;构造方法&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;因为&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;OldMyClass&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的方法这个案例被定义成了静态方法，所以没有用到这个私有变量&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/26 15:43&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;ClassAdaptor&lt;/span&gt;(OldMyClass oldMyClass) {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;oldMyClass &lt;/span&gt;= oldMyClass&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/***&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@param&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@return &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;java.lang.String&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里调用方法：方法名字可以不一样，返回值可以不一样。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/26 15:43&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;read&lt;/span&gt;() {&lt;br&gt;        String s = OldMyClass.&lt;span style=&quot;font-style:italic;&quot;&gt;readFromOld&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里可以做参数转换，&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;xml&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;转&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;json&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;等&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;write&lt;/span&gt;() {&lt;br&gt;        String s = OldMyClass.&lt;span style=&quot;font-style:italic;&quot;&gt;readFromOld&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里可以做参数转换，&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;xml&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;转&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;json&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;等&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1733" y="7010" width="670" height="900" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-8" value="门面模式：&lt;br&gt;&lt;div&gt;门面模式为子系统提供一组统一的接口，定义一组高层接口让子系统更易&lt;span style=&quot;background-color: initial;&quot;&gt;用。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;主要在接口设计方面使用：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;为了保证接口的可复用性（或者叫通用性），我们需要将接口尽量设计得细粒度一点，职责&lt;span style=&quot;background-color: initial;&quot;&gt;单一一点。但是，如果接口的粒度过小，在接口的使用者开发一个业务功能时，就会导致需&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;要调用 n 多细粒度的接口才能完成。调用者肯定会抱怨接口不好用。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;相反，如果接口粒度设计得太大，一个接口返回 n 多数据，要做 n 多事情，就会导致接口&lt;span style=&quot;background-color: initial;&quot;&gt;不够通用、可复用性不好。接口不可复用，那针对不同的调用者的业务需求，我们就需要开&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;发不同的接口来满足，这就会导致系统的接口无限膨胀。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;假设有一个系统 A，提供了 a、b、c、d 四个接口。系统 B 完成某个业务功能，需要调用&lt;span style=&quot;background-color: initial;&quot;&gt;A 系统的 a、b、d 接口。利用门面模式，我们提供一个包裹 a、b、d 接口调用的门面接口&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;x，给系统 B 直接使用。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;其中A 是一个后端服务器，系统 B 是 App 客户端：就好比PR审查接口，我们有3个接口，ppi、anti、审查，需要依次调用，前端3次请求非常耗时间，我们后端提供1个接口，组合了3个接口。这就是门面模式的应用。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;尽量保持接口的可复用性，但针对特殊情况，允许提供冗余的门面接口，&lt;span style=&quot;background-color: initial;&quot;&gt;来提供更易用的接口。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;解决的问题：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;1. 解决易用性问题&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;2. 解决性能问题&lt;br&gt;&lt;/div&gt;&lt;div&gt;3. 解决分布式事务问题&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;适配器是做接口转换，解决的是原接口和目标接口不匹配的问题。&lt;/div&gt;&lt;div&gt;门面模式做接口整合，解决的是多接口调用带来的问题。&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-740" y="7980" width="1030" height="590" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-9" value="组合模式：&lt;br&gt;&lt;div&gt;主要是用来处理树形结构数据。这里的“数据”，可&lt;span style=&quot;background-color: initial;&quot;&gt;以简单理解为一组对象集合。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;将一组对象（文件和目录）组织成&lt;span style=&quot;background-color: initial;&quot;&gt;树形结构，以表示一种‘部分 - 整体’的层次结构（目录与子目录的嵌套结构）。组合模&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;式让客户端可以统一单个对象（文件）和组合对象（目录）的处理逻辑（递归遍历）。”&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;组合模式的设计思路，与其说是一种设计模式，倒不如说是对业务场&lt;span style=&quot;background-color: initial;&quot;&gt;景的一种数据结构和算法的抽象。&lt;/span&gt;其中，数据可以表示成树这种数据结构，业务需求可以通过在树上的递归遍历算&lt;span style=&quot;background-color: initial;&quot;&gt;法来实现。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;需求：计算某个部门的人员薪水。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="520" y="7980" width="1030" height="590" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-10" value="享元模式：&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省内存，前提&lt;span style=&quot;background-color: initial;&quot;&gt;是享元对象是不可变对象。具体来讲，当一个系统中存在大量重复对象的时候，我们就可以&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;利用享元模式，将对象设计成享元，在内存中只保留一份实例，供多处代码引用，这样可以&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;减少内存中对象的数量，以起到节省内存的目的。实际上，不仅仅相同对象可以设计成享&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;元，对于相似对象，我们也可以将这些对象中相同的部分（字段），提取出来设计成享元，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;让这些大量相似对象引用这些享元。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;通过工厂模式，在工厂类中，通过一个 Map 来缓存已经创建过的享元对象，来&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;达到复用的目的。&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;享元模式 vs 单例、缓存、对象池：&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每&lt;span style=&quot;background-color: initial;&quot;&gt;个对象被多处代码引用共享。实际上，享元模式有点类似于之前讲到的单例的变体：多例。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;我们平时所讲的缓存，主要是为了提高访问效率，而非复用。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间（比如从数据库池中&lt;span style=&quot;background-color: initial;&quot;&gt;取一个连接，不需要重新创建）。在任意时刻，每一个对象、连接、线程，并不会被多处使&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用。享&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;的，主要目的是节省空间。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;应用：棋牌游戏、记事本、Java Integer(&lt;span style=&quot;background-color: initial;&quot;&gt;Long、Short、Byte&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;)、Java String。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Integer 用到了享元模式来复用对象，&lt;span style=&quot;background-color: initial;&quot;&gt;如果要创建的 Integer 对象的值在 -128 到 127 之间，会从 IntegerCache 类中&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;直接返回，否则才调用 new 方法创建。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;如果通过分析应用的 JVM 内存占用情况，发现 -128 到 255 之间的数据占用的内存比较多，你&lt;span style=&quot;background-color: initial;&quot;&gt;就可以用如下方式，将缓存的最大值从 127 调整到 255。&lt;/span&gt;-Djava.lang.Integer.IntegerCache.high=255&amp;nbsp; 或者&amp;nbsp;-XX:AutoBoxCacheMax=255&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;String 类&lt;span style=&quot;background-color: initial;&quot;&gt;利用享元模式来复用相同的字符串常量（也就是代码中的“小争哥”）。JVM 会专门开辟&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;一块存储区来存储字符串常量，这块存储区叫作“字符串常量池”。&lt;/span&gt;Integer 类中要共享的对&lt;span style=&quot;background-color: initial;&quot;&gt;象，是在类加载的时候，就集中一次性创建好的。&lt;/span&gt;但是，对于字符串来说，我们没法事先知&lt;span style=&quot;background-color: initial;&quot;&gt;道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;时候，存储到常量池中，当之后再用到的时候，直接引用常量池中已经存在的即可，就不需&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;要再重新创建了。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;实际上，享元模式对 JVM 的垃圾回收并不友好。因为享元工厂类一直保存了对享元对象的&lt;span style=&quot;background-color: initial;&quot;&gt;引用，这就导致享元对象在没有任何代码使用的情况下，也并不会被 JVM 垃圾回收机制自&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;动回收掉。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-730" y="8660" width="1070" height="810" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-11" value="行为型设计模式主要解决的就是“类或对象之间的交互”问题。观&lt;span style=&quot;background-color: initial;&quot;&gt;察者模式、模板模式、策略模式、职责链模式、状态模式、迭代器模式、访问者模式、备忘&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;录模式、命令模式、解释器模式、中介模式。&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;font-size: 12.7559pt; font-family: MicrosoftYaHei-Bold; font-weight: bold;&quot;&gt;设计模式要干的事情就&lt;/span&gt;&lt;span style=&quot;font-family: MicrosoftYaHei-Bold; font-size: 12.7559pt; font-weight: bold; background-color: initial;&quot;&gt;是解耦。创建型模式是将创建和使用代码解耦，结构型模式是将不同功能代码解耦，行为型&lt;/span&gt;&lt;span style=&quot;font-family: MicrosoftYaHei-Bold; font-size: 12.7559pt; font-weight: bold; background-color: initial;&quot;&gt;模式是将不同的行为代码解耦。&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-770" y="9770" width="760" height="180" as="geometry" />
        </mxCell>
        <mxCell id="Vt2ITBj4GFt1leEdtp9k-12" value="&lt;span style=&quot;background-color: initial;&quot;&gt;观察者模式：&lt;br&gt;&lt;div&gt;有同步阻塞的实现&lt;span style=&quot;background-color: initial;&quot;&gt;方式，也有异步非阻塞的实现方式；有进程内的实现方式，也有跨进程的实现方式。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;赖的对象都会自动收到通知。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;同步阻塞方式：观察者和&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;被观察者代码在同一个线程内执行，被观察者一直阻塞，直到所有的观察者代码都执行完成&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;之后，才执行后续的代码。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;同步阻塞是最经典的实现方式，主要是为了代码解耦；异步非阻塞除了能实现代码解耦之&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;外，还能提高代码的执行效率；进程间的观察者模式解耦更加彻底，一般是基于消息队列来&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;实现，用来实现不同进程间的被观察者和观察者之间的交互。&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;Google Guava的EventBus实现：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;EventBus 框架，它不仅仅支持异步非阻塞&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;模式，同时也支持同步阻塞模式&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-790" y="10080" width="800" height="610" as="geometry" />
        </mxCell>
        <mxCell id="yrPFSyGZQ10gtGF5mKnR-1" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;package designpatten.publishsubscribe&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;IPublish {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;addSubscribe&lt;/span&gt;(ISubscribe subscribe)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;removeSubscribe&lt;/span&gt;(ISubscribe subscribe)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notifySubscribes&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}package designpatten.publishsubscribe&lt;span style=&quot;font-size: 9.8pt; color: rgb(204, 120, 50);&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;ISubscribe {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;subscribeCallback&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;package designpatten.publishsubscribe&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.ArrayList&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.List&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;TaskCompletePublish &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;IPublish{&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final &lt;/span&gt;List&amp;lt;ISubscribe&amp;gt; &lt;span style=&quot;color:#9876aa;&quot;&gt;subscribeList &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;ArrayList&amp;lt;&amp;gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;addSubscribe&lt;/span&gt;(ISubscribe subscribe) {&lt;br&gt;        &lt;span style=&quot;color:#9876aa;&quot;&gt;subscribeList&lt;/span&gt;.add(subscribe)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;removeSubscribe&lt;/span&gt;(ISubscribe subscribe) {&lt;br&gt;        &lt;span style=&quot;color:#9876aa;&quot;&gt;subscribeList&lt;/span&gt;.remove(subscribe)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;notifySubscribes&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;for &lt;/span&gt;(ISubscribe subscribe:&lt;br&gt;                &lt;span style=&quot;color:#9876aa;&quot;&gt;subscribeList&lt;/span&gt;) {&lt;br&gt;            subscribe.subscribeCallback()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="80" y="10080" width="470" height="640" as="geometry" />
        </mxCell>
        <mxCell id="yrPFSyGZQ10gtGF5mKnR-2" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;package &lt;/span&gt;designpatten.publishsubscribe&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;SendHisMessageSubscribe &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;ISubscribe{&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;subscribeCallback&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里就是任务已经完成之后，调用这个方法&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;任务已经完成，调用发送消息给&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;HIS&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法。&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;package designpatten.publishsubscribe&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;DealDataBaseSubscribe &lt;span style=&quot;color:#cc7832;&quot;&gt;implements &lt;/span&gt;ISubscribe{&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;subscribeCallback&lt;/span&gt;() {&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;任务完成之后，进行数据库的处理。。。。&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:9.8pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 9.8pt;&quot;&gt;package designpatten.publishsubscribe&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;TestPubSub {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这是同步阻塞方式的发布&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;订阅模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;TaskCompletePublish publish = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;TaskCompletePublish()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;SendHisMessageSubscribe subscribe1 = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;SendHisMessageSubscribe()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;DealDataBaseSubscribe subscribe2 = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;DealDataBaseSubscribe()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;publish.addSubscribe(subscribe1)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;publish.addSubscribe(subscribe2)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里把唤醒扔进去线程池？实现异步的发布&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;订阅？&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;EventBus&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        //&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这都是进程内的方式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;进程间&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;---Kafka---&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;publish.notifySubscribes()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="590" y="10080" width="510" height="630" as="geometry" />
        </mxCell>
        <mxCell id="yrPFSyGZQ10gtGF5mKnR-3" value="&lt;div style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业&lt;/font&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;务代码，让程序员聚焦业务开发。&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="-810" y="10010" width="1030" height="40" as="geometry" />
        </mxCell>
        <mxCell id="yrPFSyGZQ10gtGF5mKnR-4" value="模板模式：&lt;br&gt;&lt;div&gt;模板模式主要是用来解决复用和扩展两个问题。模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些&lt;/span&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;步骤。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font style=&quot;&quot;&gt;&lt;div style=&quot;&quot;&gt;&lt;font face=&quot;微软雅黑&quot; color=&quot;#353535&quot;&gt;扩展，并不是指代码的扩展性，而是指框架的&lt;/font&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px; background-color: initial;&quot;&gt;扩展性，有点类似控制反转，&lt;/span&gt;&lt;font face=&quot;微软雅黑&quot; color=&quot;#353535&quot;&gt;&lt;span style=&quot;font-size: 17.0079px;&quot;&gt;基于这个&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 18px; background-color: initial;&quot;&gt;作用，模板模式常用在框架的开发中，让框架用户可以在不修改框架源码的情况下，定制化&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 18px; background-color: initial;&quot;&gt;框架的功能，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;将业务代码通过扩展点镶嵌到框架中执行&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 18px; background-color: initial;&quot;&gt;。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 18px; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 18px; background-color: initial;&quot;&gt;&lt;div&gt;在模板模式经典的实现中，模板方法定义为 final，可以避免被子类重写。需要子类重写的&lt;span style=&quot;background-color: initial;&quot;&gt;方法定义为 abstract，可以强迫子类去实现。不过，在实际项目开发中，模板模式的实现&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;比较灵活，以上两点都不是必须的。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 12.7559pt; background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;模板模式把一个算法中不变的流程抽象到父类的模板方法 templateMethod() 中，将可变&lt;span style=&quot;background-color: initial; font-size: 17.0079px;&quot;&gt;的部分 method1()、method2() 留给子类 ContreteClass1 和 ContreteClass2 来实现。&lt;/span&gt;&lt;span style=&quot;background-color: initial; font-size: 17.0079px;&quot;&gt;所有的子类都可以复用父类中模板方法定义的流程代码。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;&lt;span style=&quot;background-color: initial; font-size: 17.0079px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;如果1个类，提供了多个模版方法，且分别有不同的抽象方法，那子类继承之后必须得实现所有的抽象方法，如何优化？&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;1.可能的话，跟据单一职责，划分为2个类。&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;2.适配器模式、外观模式，再封装1个类出来。&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;最优化的，就是用回调实现！！！&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑; font-size: 17.0079px;&quot;&gt;回调跟模版模式的区别：&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑;&quot;&gt;A 调用 B，B 反过来又调用 A，这种调用机制就叫作“回调”。类似于C#里面的委托。&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑;&quot;&gt;回调可以分为同步回调和异步回调（或者延迟回调）。从应用&lt;span style=&quot;background-color: initial; color: rgb(0, 0, 0); font-family: Helvetica;&quot;&gt;场景上来看，同步回调看起来更像模板模式，异步回调看起来更像观察者模式。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(53, 53, 53); font-family: 微软雅黑;&quot;&gt;&lt;span style=&quot;background-color: initial; color: rgb(0, 0, 0); font-family: Helvetica;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div style=&quot;font-family: Helvetica;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;从代码实现上来看，回调和模板模式完全不同。&lt;/span&gt;&lt;font color=&quot;#ff0000&quot;&gt;回调基于组合关系来实现&lt;/font&gt;，把一个对象传递&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;给另一个对象，是一种对象之间的关系；&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;模板模式基于继承关系来实现&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;，子类重写父类的抽&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: initial;&quot;&gt;象方法，是一种类之间的关系。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(0, 0, 0); font-family: Helvetica;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: rgb(0, 0, 0); font-family: Helvetica;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;组合优于继承。回调相对于模板&lt;span style=&quot;background-color: initial;&quot;&gt;模式会更加灵活，主要体现在下面几点：&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div style=&quot;&quot;&gt;像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不&lt;span style=&quot;background-color: initial;&quot;&gt;再具有继承的能力。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实&lt;span style=&quot;background-color: initial;&quot;&gt;现都要定义不同的子类。&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到&lt;span style=&quot;background-color: initial;&quot;&gt;其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;要往用到的模板方法中注入回调对象即可。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="-790" y="10820" width="820" height="910" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-1" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.template&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;ScreenTask&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;模版方法抽象类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 9:50&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract class &lt;/span&gt;ScreenTask {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;screenHisTask&lt;/span&gt;(String taskJson){&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//1.&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;调用&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;core&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;审查&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;       &lt;/span&gt;String resCode =  doPassCoreScreen()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//2.&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;调用&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;pr&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;过滤&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;doPrSettingFilter()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#ffc66d;&quot;&gt;doPassCoreScreen&lt;/span&gt;(){&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;审查结果&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public abstract void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doPrSettingFilter&lt;/span&gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;public class MyTemplate {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;        ScreenTask st = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MzScreenTask()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;st.screenHisTask(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;123&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="90" y="10820" width="400" height="580" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-2" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.template&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MzScreenTask&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;门诊模版实现类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 10:45&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MzScreenTask &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;ScreenTask {&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doPrSettingFilter&lt;/span&gt;() {&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;门诊的&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;pr&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;过滤&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="540" y="10820" width="400" height="450" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-3" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.template&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;ZyScreenTask&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;住院模版实现类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 10:45&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ZyScreenTask &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;ScreenTask{&lt;br&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Override&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;doPrSettingFilter&lt;/span&gt;() {&lt;br&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;住院的&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;pr&lt;/span&gt;&lt;span style=&quot;color:#6a8759;font-family:&#39;宋体&#39;,monospace;&quot;&gt;过滤&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="1000" y="10820" width="400" height="450" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-4" value="策略模式：&lt;br&gt;&lt;br&gt;&lt;div&gt;定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略&lt;span style=&quot;background-color: initial;&quot;&gt;模式可以使算法的变化独立于使用它们的客户端（这里的客户端代指使用算法的代码）。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;策略模式解耦的是策略的定义（把if else的逻辑提炼成单独的策略类）、创建（工厂创建，静态工厂+hashmap （hashmap这种算是查表法，这种场景是类是无状态的---不包含成员变量，只有单纯的算法）或者 if else new （这种是有状态的），这种相当于把if else 移到了工厂里面，还需要进一步优化，可以通过反射来创建实例）、使用（运行时动态确定使用，一般用配置文件的配置）这三部&lt;span style=&quot;background-color: initial;&quot;&gt;分。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;策略模式适用于根据不同类型待动&lt;span style=&quot;background-color: initial;&quot;&gt;态，决定使用哪种策略这样一种应用场景。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;例子：对一个外部文件内容进行排序，根据文件的大小，来选择不同的算法。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;一提到 if-else 分支判断，有人就觉得它是烂代码。如果 if-else 分支判断不复杂、代码不&lt;span style=&quot;background-color: initial;&quot;&gt;多，这并没有任何问题，毕竟 if-else 分支判断几乎是所有编程语言都会提供的语法，存在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;即有理由。遵循 KISS 原则，怎么简单怎么来，就是最好的设计。非得用策略模式，搞出 n&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;多类，反倒是一种过度设计。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;一提到策略模式，有人就觉得，它的作用是避免 if-else 分支判断逻辑。实际上，这种认识&lt;span style=&quot;background-color: initial;&quot;&gt;是很片面的。策略模式主要的作用还是解耦策略的定义、创建和使用，控制代码的复杂度，&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;让每个部分都不至于过于复杂、代码量过多。除此之外，对于复杂代码来说，策略模式还能&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;让其满足开闭原则，添加新策略的时候，最小化、集中化代码改动，减少引入 bug 的风&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;险。&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="-800" y="11930" width="820" height="910" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-5" value="消除if else 的分支条件，除了策略模式之外，还有状态模式。" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontSize=18;" vertex="1" parent="1">
          <mxGeometry x="-1410" y="11950" width="440" height="50" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-6" value="实际上 if else 不多，且内容不复杂，也可以不用优化，但是有的if else 里面的东西代码很多，就算抽象出来一个private 的方法，也会导致类的长度很长。&lt;br&gt;&lt;div&gt;一个类的代码太多也会影响到可读性、可维护性。除此之外，所有的&lt;span style=&quot;background-color: initial;&quot;&gt;排序算法都设计成 Sorter 的私有函数，也会影响代码的可复用性。&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontSize=18;" vertex="1" parent="1">
          <mxGeometry x="50" y="11930" width="590" height="140" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-7" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;package designpatten.strategy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySortOld&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;第一版本的排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;策略模式解耦的是：策略的定义、创建、使用。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;首先跟&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无关。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;第一，因为每个算法的代码量很大&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;分支里面的代码内容很多，很复杂。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;首先想到的就是提取单独的&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法。这样&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;里面东西就一行了。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*      &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这样也有问题，首先，这个类会变得很长，其次，这些算法不能被复用。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;那么继续优化，每一个算法单独提取到&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;个类里面。然后再分支里面进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;操作。这是解耦策略的定义&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;前面说了，还要解耦创建和使用，所以继续优化，使用工厂来解耦策略的创建。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*      &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里使用工厂模式：&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*          &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;满足无状态：可以使用静态工厂&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;+hashmap&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的方式来消除&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*          &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;不满足，只能用&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;来 &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;*              &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里怎么优化呢？通过反射来创建对象即可。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;如果使用类的判断&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;不多的话，这里就可以优化结束了。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;如果有洁癖，还可以用静态代码块&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;+hashmap&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;来进行去&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 15:42&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySortOld {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;mySortOld&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;fileSize){&lt;br&gt;        IStrategy strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        if &lt;/span&gt;(fileSize &amp;lt;= &lt;span style=&quot;color:#6897bb;&quot;&gt;10&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，快速排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            QuicklySortStrategy quicklySortStrategy = new QuicklySortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            quicklySortStrategy.sortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;            &lt;/span&gt;strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;QuicklySortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if&lt;/span&gt;(fileSize &amp;gt; &lt;span style=&quot;color:#6897bb;&quot;&gt;10 &lt;/span&gt;&amp;amp;&amp;amp; fileSize &amp;lt;= &lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;100M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，外部排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            OutSortStrategy outSortStrategy = new OutSortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            outSortStrategy.sortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;            &lt;/span&gt;strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;OutSortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if&lt;/span&gt;(fileSize &amp;gt; &lt;span style=&quot;color:#6897bb;&quot;&gt;100 &lt;/span&gt;&amp;amp;&amp;amp; fileSize &amp;lt;= &lt;span style=&quot;color:#6897bb;&quot;&gt;1000&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;100M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;1000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，并发排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            ConcurrentSortStrategy concurrentSortStrategy = new ConcurrentSortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            concurrentSortStrategy.sortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;            &lt;/span&gt;strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;ConcurrentSortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;else if&lt;/span&gt;(fileSize &amp;gt; &lt;span style=&quot;color:#6897bb;&quot;&gt;1000 &lt;/span&gt;&amp;amp;&amp;amp; fileSize &amp;lt;= &lt;span style=&quot;color:#6897bb;&quot;&gt;10000&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;1000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;MapReduce&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            MapReduceSortStrategy mapReduceSortStrategy = new MapReduceSortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            mapReduceSortStrategy.sortStrategy();&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;            &lt;/span&gt;strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MapReduceSortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;&lt;br&gt;        strategy.sortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="1000" y="11920" width="830" height="1150" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-8" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.strategy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.ArrayList&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.List&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySortNew&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;优化后的排序类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 16:57&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySortNew {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final static &lt;/span&gt;List&amp;lt;AllRange&amp;gt; &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;ArrayList&amp;lt;&amp;gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    static &lt;/span&gt;{&lt;br&gt;        &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange&lt;/span&gt;.add(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;AllRange(&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;MySortStrategyFactory.&lt;span style=&quot;font-style:italic;&quot;&gt;createStrategy&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;quick&quot;&lt;/span&gt;)))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange&lt;/span&gt;.add(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;AllRange(&lt;span style=&quot;color:#6897bb;&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;MySortStrategyFactory.&lt;span style=&quot;font-style:italic;&quot;&gt;createStrategy&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;out&quot;&lt;/span&gt;)))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange&lt;/span&gt;.add(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;AllRange(&lt;span style=&quot;color:#6897bb;&quot;&gt;101&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;MySortStrategyFactory.&lt;span style=&quot;font-style:italic;&quot;&gt;createStrategy&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;concurrent&quot;&lt;/span&gt;)))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange&lt;/span&gt;.add(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;AllRange(&lt;span style=&quot;color:#6897bb;&quot;&gt;1001&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;10000&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;MySortStrategyFactory.&lt;span style=&quot;font-style:italic;&quot;&gt;createStrategy&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;mapreduce&quot;&lt;/span&gt;)))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;mySortOld&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;fileSize){&lt;br&gt;        IStrategy strategy = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;使用里面也可以用静态代码块&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;+List&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的方式来消除&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;for &lt;/span&gt;(AllRange range:&lt;br&gt;                &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;listRange&lt;/span&gt;) {&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(fileSize&amp;gt;= range.&lt;span style=&quot;color:#9876aa;&quot;&gt;low &lt;/span&gt;&amp;amp;&amp;amp; fileSize &amp;lt;= range.&lt;span style=&quot;color:#9876aa;&quot;&gt;height&lt;/span&gt;){&lt;br&gt;                strategy = range.&lt;span style=&quot;color:#9876aa;&quot;&gt;strategy&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;                break;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            &lt;/span&gt;}&lt;br&gt;        }&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//        if (fileSize &amp;lt;= 10){&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            //&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，快速排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            MySortStrategyFactory.createStrategy(&quot;quick&quot;);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//        }else if(fileSize &amp;gt; 10 &amp;amp;&amp;amp; fileSize &amp;lt;= 100){&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            //&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;100M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，外部排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            MySortStrategyFactory.createStrategy(&quot;out&quot;);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//        }else if(fileSize &amp;gt; 100 &amp;amp;&amp;amp; fileSize &amp;lt;= 1000){&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            //&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;100M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;1000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，并发排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            MySortStrategyFactory.createStrategy(&quot;concurrent&quot;);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//        }else if(fileSize &amp;gt; 1000 &amp;amp;&amp;amp; fileSize &amp;lt;= 10000){&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            //&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;文件大于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;1000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，小于&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;10000M&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;MapReduce&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;排序&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//            MySortStrategyFactory.createStrategy(&quot;mapreduce&quot;);&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;//        }&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;        &lt;/span&gt;strategy.sortStrategy()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br&gt;        &lt;span style=&quot;color:#808080;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;这里使用&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;1011&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，可以用配置的方式来解耦。。。。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;font-family:&#39;宋体&#39;,monospace;&quot;&gt;        &lt;/span&gt;MySortNew.&lt;span style=&quot;font-style:italic;&quot;&gt;mySortOld&lt;/span&gt;(&lt;span style=&quot;color:#6897bb;&quot;&gt;1011&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="2040" y="11920" width="830" height="1150" as="geometry" />
        </mxCell>
        <mxCell id="m9XIumqSu_zR2wMT3Erg-9" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.strategy&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;java.util.HashMap&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySortStrategyFactory&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;策略类的工厂，生产类。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* 1.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无状态的类工厂，可以用静态工厂&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;+hashmap&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * 2.&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;有状态的类工厂，只能&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;对象，但是又会出现&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;if else&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，解决办法：反射创建类&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/29 16:49&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySortStrategyFactory {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static final &lt;/span&gt;HashMap&amp;lt;String&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;/span&gt;IStrategy&amp;gt; &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;HashMap&amp;lt;&amp;gt;()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    static &lt;/span&gt;{&lt;br&gt;        &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;quick&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,new &lt;/span&gt;QuicklySortStrategy())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,new &lt;/span&gt;OutSortStrategy())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;concurrent&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,new &lt;/span&gt;ConcurrentSortStrategy())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap&lt;/span&gt;.put(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;mapreduce&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,new &lt;/span&gt;MapReduceSortStrategy())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;IStrategy &lt;span style=&quot;color:#ffc66d;&quot;&gt;createStrategy&lt;/span&gt;(String type){&lt;br&gt;       &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;strategyHashMap&lt;/span&gt;.get(type)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="140" y="12160" width="710" height="570" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
