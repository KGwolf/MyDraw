<mxfile host="app.diagrams.net" modified="2024-01-23T07:21:28.441Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="f01x3NPTC8geu9ZBjpnL" version="22.1.21" type="github">
  <diagram name="第 1 页" id="3uKooOr-jPmKd_cmfSqT">
    <mxGraphModel dx="2876" dy="1083" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="h9diVwNSZwyLOE3jBIlE-1" value="单例模式：&lt;br&gt;&lt;div&gt;为什么要使用单例？单例存在哪些问题？单例与静态类的区别？有何替代的解决方案？&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;第一，有些情况使用new对象来操作可能会有并发问题，比如写日志，几个service里面单独new Log().write()，同一行写，&lt;span style=&quot;background-color: initial;&quot;&gt;那么可能就会覆盖日志。当然有锁的方式（分布式锁、jvm锁）来处理、或者塞入消息队列，但是更简单的还是单例来解决。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;第二，有些类就适合在整个程序里面存一份。比如配置类、工具类等等。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;如何实现单例：&lt;/div&gt;&lt;div&gt;&lt;div&gt;构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例；&lt;/div&gt;&lt;div&gt;考虑对象创建时的线程安全问题；&lt;/div&gt;&lt;div&gt;考虑是否支持延迟加载；&lt;/div&gt;&lt;div&gt;考虑 getInstance() 性能是否高（是否加锁）。&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.饿汉式单例：&lt;/div&gt;&lt;div&gt;&lt;div&gt;在类加载的时候，instance 静态实例就已经创建并初始化好&lt;span style=&quot;background-color: initial;&quot;&gt;了，所以，instance 实例的创建过程是线程安全的。缺点是不支持延迟加载（等需要用到的时候再进行创建对象）。但是延迟加载也不怎么需要，没卵用！&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;2.懒汉式单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;类加载的时候不进行初始化，在调用getInstance()方法的时候，才进行new对象操作。实现了延迟加载。缺点是方法上加了synchronized，并发度降低了。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;3.双重检测锁单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;大体跟懒汉式一样，只是在获取实例的时候不一样，取消了方法上的sync，在方法内部进行了2次判断null。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;第一次判断，是为了不必要的同步代码块执行，解决了懒汉式的并发问题。第二次检测是为了避免多次&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;对象。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;在&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;idea&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;中写双重检测锁，会给你提示，进行优化成静态内部类的方式。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;4.静态内部类单例：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;既做到了延迟加载，又做到了无锁实现线程安全，简洁性和可读性也比双检锁好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;5.枚举单例：利用枚举本身的特性，保证了实例的安全性和唯一性。可读性不好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;单例这种设计模式存在哪些问题？为什么会被称为反模式？如果&lt;span style=&quot;background-color: initial;&quot;&gt;不用单例，该如何表示全局唯一类？有何替代的解决方案？&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.单例对oop特性支持不友好。使用方式违背了基于接口而非实现的设计原则，也就违背了广义上理解的&lt;span style=&quot;background-color: initial;&quot;&gt;OOP 的抽象特性。如果未来某一天，我们希望针对不同的业务采用不同的 ID 生成算法。&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;比如，订单 ID 和用户 ID 采用不同的 ID 生成器来生成。为了应对这个需求变化，我们需要&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;修改所有用到 IdGenerator 类的地方，这样代码的改动就会比较大。&lt;/span&gt;单例对继承、多态特性的支持也不友好，可以实现，但看起来很怪。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.单例会隐藏类之间的依赖关系。单例类不需要显示创建、不需要依赖参数传递，在函数中直接调用&lt;span style=&quot;background-color: initial;&quot;&gt;就可以了。而我们有时候需要看这种依赖关系。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;3.单例对代码的扩展性不友好。&lt;/span&gt;如果未来某一天，我们需要在代码中创建两个实例&lt;span style=&quot;background-color: initial;&quot;&gt;或多个实例，那就要对代码有比较大的改动。比如，数据库连接池，刚开始肯定设计成1个，控制连接数量。后面可能有些sql查询慢，这样就占用连接久。如果设计成2个连接池，慢查询用1个，其它用1个。就不好改代码了。&lt;/span&gt;实际上，&lt;font color=&quot;#ff0000&quot;&gt;一些开源的数据库连接池、线程池也确实没有设&lt;/font&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;font color=&quot;#ff0000&quot;&gt;计成单例类&lt;/font&gt;。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;4.单例对代码的可测试性不友好。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;5.单例不支持有参的构造函数。比如&lt;/span&gt;连接池的单例对象，我们没法通过参数来&lt;span style=&quot;background-color: initial;&quot;&gt;指定连接池的大小。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;&lt;font color=&quot;#ff0000&quot;&gt;替代的解决方案：类对象的全局唯一性可以通过多种不同的方式来保证。我们既可以通过单例模式来强&lt;span style=&quot;background-color: initial;&quot;&gt;制保证，也可以通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证，还可以通过程&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;序员自己来保证（自己在编写代码的时候自己保证不要创建两个类对象）。&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="-790" y="50" width="1050" height="1150" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-3" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonEHan&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;饿汉式单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性在类加载进内存的时候就被初始化了，类加载不存在线程安全问题。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;final&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示只能在类加载或者构造函数里面进行赋值，不允许其它地方修改。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonEHan {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonEHan&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final static &lt;/span&gt;MySingletonEHan &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonEHan()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public static &lt;/span&gt;MySingletonEHan &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="290" y="50" width="770" height="630" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-4" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonLanHan&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;懒汉式单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性不进行初始化，在进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法调用的时候才进行初始化，实现懒加载。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性只设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;为什么要在方法上面加&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;synchronized&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;呢？因为多线程并发的时候，会出现多次&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;的情况。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;但是方法上面加&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;synchronized &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;会不会有效率问题？ 锁不够细化？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonLanHan {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonLanHan&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static &lt;/span&gt;MySingletonLanHan &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public synchronized static &lt;/span&gt;MySingletonLanHan &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonLanHan()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="1090" y="50" width="730" height="690" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-5" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonDoubleLock&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;双重检测锁单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性不进行初始化，在进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;方法调用的时候才进行初始化，实现懒加载。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;属性只设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;static&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，表示属性是类级别的，不是对象实例级别的。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;为什么要进行&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;次检测&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;呢？&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;第一次判断，是为了不必要的同步代码块执行，解决了懒汉式的并发问题。第二次检测是为了避免多次&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;在&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;idea&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;中写双重检测锁，会给你提示，进行优化成静态内部类的方式。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonDoubleLock {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonDoubleLock&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static &lt;/span&gt;MySingletonDoubleLock &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public static &lt;/span&gt;MySingletonDoubleLock &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;            &lt;span style=&quot;color:#cc7832;&quot;&gt;synchronized &lt;/span&gt;(MySingletonDoubleLock.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;){&lt;br&gt;                &lt;span style=&quot;color:#cc7832;&quot;&gt;if &lt;/span&gt;(&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;== &lt;span style=&quot;color:#cc7832;&quot;&gt;null&lt;/span&gt;){&lt;br&gt;                    &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonDoubleLock()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;                &lt;/span&gt;}&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="1900" y="50" width="820" height="790" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-6" value="&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;pre style=&quot;font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace; font-size: 12pt;&quot;&gt;package designpatten.singleton&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;lombok.&lt;span style=&quot;color:#bbb529;&quot;&gt;Data&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;MySingletonInnerClass&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;内部静态类单例模式&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;。&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;既做到了延迟加载，又做到了无锁实现线程安全，简洁性和可读性也比双检锁好&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;xiahaitao&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;2024/1/23 10:44&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Data&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;MySingletonInnerClass {&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;age&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;无参构造设置成&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;，防止外部&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;new&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;MySingletonInnerClass&lt;/span&gt;() {&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private static final class &lt;/span&gt;InstanceHolder {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;static final &lt;/span&gt;MySingletonInnerClass &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;MySingletonInnerClass()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;&lt;br&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static &lt;/span&gt;MySingletonInnerClass &lt;span style=&quot;color:#ffc66d;&quot;&gt;getInstance&lt;/span&gt;() {&lt;br&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;InstanceHolder.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="2840" y="50" width="700" height="640" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-7" value="&lt;div&gt;如果项目中已经用了很多单例模式，我们该如何在尽量减少代码改&lt;span style=&quot;background-color: initial;&quot;&gt;动的情况下，通过重构代码来提高代码的可测试性呢？&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;div&gt;把代码“User cachedUser = CacheManager.getInstance().getUser(userId);”单独&lt;span style=&quot;background-color: initial;&quot;&gt;提取出来做成一个单独的函数，这样这个函数就可以进行mock了，进而方便测试validate&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CachedUser&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="300" y="720" width="670" height="220" as="geometry" />
        </mxCell>
        <mxCell id="h9diVwNSZwyLOE3jBIlE-8" value="&lt;div&gt;我们所说的单例，是进程内的实例唯一，那么线程内的单例怎么做呢？&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;verticalAlign=top;align=left;" vertex="1" parent="1">
          <mxGeometry x="320" y="980" width="670" height="220" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
