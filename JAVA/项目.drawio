<mxfile host="app.diagrams.net" modified="2023-12-27T05:55:46.144Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="gTtfj4Ijdz_W_v1opJwU" version="22.1.12" type="github">
  <diagram name="第 1 页" id="1XJYP80JxbJxhC29MnGr">
    <mxGraphModel dx="1434" dy="1927" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="axaWvUbI3fm5PjR0QgIP-2" value="分布式缓存：&lt;br&gt;选择Redis作为分布式存储中间件。&lt;br&gt;我们存储的是什么？&lt;br&gt;我们用redis来存储消息ID，当我们需要通知消息的时候，就生成一条记录（id，content）保存到数据库的一张表,content为具体的任务的json串。&lt;br&gt;那为什么我们不存储具体的任务信息？&lt;br&gt;因为考虑到信息安全问题。可能是想防止小pass。以及信息安全吧，最主要的可能是pass的规则问题。那是公司的命根子，不能让实施或者开发轻易拿到，他们现在的方式是存到一个加密的文件，具体怎么加密的，确实不清楚。&lt;br&gt;&lt;br&gt;问题：我们为什么不用消息队列呢？&lt;br&gt;&lt;br&gt;问题：如果我们每个缓存状态更改，都需要通知Redis来广播到每个节点，那么会不会导致服务器压力变大？我们的状态变更还是很频繁的&lt;br&gt;&lt;br&gt;经过讨论，第一版本，是在网关端做负载均衡的配置，同一个ip的所有请求负载到同一个节点上面。这样就不用频繁的进行内存数据的同步了。然后在保存数据库的时候（包括业务本身的数据入库，和缓存消息的入库），再给redis发缓存消息ID&quot;{\&quot;messageid\&quot;,\&#39;xxx\&#39;}&quot;，由redis进行广播，所有的PR分布式节点都进行订阅去同步消息（根据消息ID去数据库里面查询具体的任务信息串）。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="70" y="100" width="840" height="250" as="geometry" />
        </mxCell>
        <mxCell id="axaWvUbI3fm5PjR0QgIP-3" value="分布式数据库：&lt;br&gt;读写分离（主从，没有做主备），历史库。&lt;br&gt;&lt;br&gt;只要有写的方法，都走的是主库。只有查询的都走的是从库。&lt;br&gt;然后历史库，需要前端来配合，需要前端根据页面选择查询的时间来判断走的是不是历史库。然后传值给后端，进行注解的判断？&lt;br&gt;&lt;br&gt;数据库使用的pgsql，可以自己做主从复制，中间件的主从复制一般有2种，1.快照模式。2.增量语句执行。&lt;br&gt;我们公司的pgsql应该用的是WAL（Write-Ahead Logging）来在主服务器和从服务器之间传输事务日志，从而保持从服务器的数据与主服务器的数据同步。&lt;br&gt;&lt;br&gt;在程序里，使用dynamicdatasource来做的主从读写分离。配置多个数据源。然后在每个方法上面加上注解@DS(&quot;slave&quot;)。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="80" y="610" width="800" height="180" as="geometry" />
        </mxCell>
        <mxCell id="lYMavn7DF4E9moOjVgNg-1" value="如果网关层不使用IP负载的模式，那么请求就可能会被打散到所有的pr服务节点上面，那么就必须要求缓存一致性，且强一一致缓存。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1010" y="100" width="320" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lYMavn7DF4E9moOjVgNg-2" value="需要搞清楚java版本的提请审核之后，怎么到药师端提醒有任务的？再来分析下面的需求。&lt;br&gt;&lt;br&gt;我们有一种模式，是分药房模式，可能不同的药师监测不同的药房。那么就会有子任务出现。由不同的药师来进行审核。那如果用同一IP的请求到同一个服务器。那么" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="980" y="250" width="320" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lYMavn7DF4E9moOjVgNg-3" value="公司整个PASS项目是一个微服务项目。&lt;br&gt;&lt;br&gt;PR作为其中的一个微服务。&lt;br&gt;&lt;br&gt;我们做的是集群。分担医生站来的请求压力。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="290" y="-30" width="320" height="110" as="geometry" />
        </mxCell>
        <mxCell id="lYMavn7DF4E9moOjVgNg-4" value="由于reids的广播消息不算很靠谱的，那我们要怎么保证各个节点的内存数据同步呢？&lt;br&gt;&lt;br&gt;跑定时任务？每个缓存对象（caseid对应的一个任务）查看其中的时间戳，是不是跟数据库的能对应上。如果不能则更新最新的数据到未成功同步的节点？那么是否会导致效率的问题呢？&lt;br&gt;&lt;br&gt;方案2：每个PR后端节点链接redis的时候，都在redis里面存上各自的ip？有什么用呢？&lt;br&gt;&lt;br&gt;因为我们缓存只存消息ID，所以不管是同步消息，还是定时任务去查缓存不一致，都需要查询数据库，这样会不会导致数据库崩掉？？" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="150" y="380" width="620" height="180" as="geometry" />
        </mxCell>
        <mxCell id="azIFYM6eBztKxtA_MHt6-1" value="性能优化：&lt;br&gt;用jmiter做压测，我们.net版本的 门诊80，住院120，加起来就是200。应该说的是QPS？&lt;br&gt;java版本的性能要差点。首次排查可能是因为Disruptor的线程引起的，生产者线程1个，然后消费者线程N个。还未排查出是不是这个问题。&lt;br&gt;&lt;br&gt;&lt;br&gt;bs优化：&lt;br&gt;首先后端逻辑很多+=，改成StringBuilder。&lt;br&gt;然后页面优化（重点）：因为业务需求原因，我们需要在页面存储2个大的JSON串。还有就是JS文件，刚开始也是跟html写到一起的，大概有几千行JS代码，且里面有需要thymleaf解析的代码。&lt;br&gt;解决步骤：大的JSOn串缓存在后端，根据taskid来进行缓存，当页面加载完成之后，再ajax同步从后端缓存取，取完就删除，这样也不会占用内存。&lt;br&gt;同时，把JS分离开到单独的文件。需要后端在JS解析的代码，修改成Js变量。这样不用解析。&lt;br&gt;改完之后，完全能撑住200并发了。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="90" y="910" width="810" height="230" as="geometry" />
        </mxCell>
        <mxCell id="OiV16W11Bcy6xy-m6XNg-1" value="要搞清楚.net版本和java版本统计分析和查询的逻辑，从开始的查询和统计分析进行硬查询，到进行预处理查询，再到进行优化。&lt;br&gt;&lt;br&gt;.net版本的统计分析痛点：预处理到表里面的是具体的count，比如预处理表的字段：提交数-10，干预数-20，双签数-30等等，而点击链接是进行代码逻辑硬查询（虽然也是查询预处理表，但是指标逻辑是可以跟随需求而变动的），但是预处理到表里面的历史数据，count是不能改变的，就导致了count跟实际链接查询出来的数据不一致。解决办法就要进行刷历史数据，这个过程比较耗时。&lt;br&gt;&lt;br&gt;java版本解决了这个痛点，首先预处理到表里面的不在是count，而是一个标记，比如：auditmodeid&amp;nbsp; 提交数-1 干预数-0，当查询详情的时候，根据只需要判断&amp;gt;0即可。这样能跟整个统计出来的数字对应上。但是这种情况虽然对应上了，如果指标算法变了的话（具体怎么变化？），那么历史数据的count跟变了之后想要的count是对不上的。但是这个就容错高些了。看医院需不需要统一，如果需要就刷历史数据。主动权给到医院。有的医院不需要刷，有的可能需要。" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="980" y="440" width="460" height="250" as="geometry" />
        </mxCell>
        <mxCell id="0i6LU9kepRgSpGDFbb0o-1" value="公共的逻辑可以放哪里，会变化的逻辑放哪里，怎么进行封装，可以看看AQS源码，Spring源码，Tomcat源码" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="750" y="-110" width="300" height="60" as="geometry" />
        </mxCell>
        <mxCell id="M4xeJUEj8VqUzHAWt1Ij-1" value="Redis，PR用的是hash存储。对象通过序列化，反序列化的方式进行存储。&lt;br&gt;类里面的方法不能以is开头，否则反序列化会报错，当然这根序列化器有关系，可以自定义吧？" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="690" y="-10" width="300" height="80" as="geometry" />
        </mxCell>
        <mxCell id="pnb352GZgsO-i2-xDFfo-1" value="可以吧PR的任务生成，加上一个抢单的功能！！！&lt;br&gt;&lt;br&gt;分布式环境下的！！！！&lt;br&gt;&lt;br&gt;redis可以用reddison来做分布式锁的框架！" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="340" y="-180" width="310" height="90" as="geometry" />
        </mxCell>
        <mxCell id="GLIDyd0n-ON3j2NHpdD_-1" value="Disruptor，在高并发下面报错：&lt;br&gt;&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;2023-12-14 09:26:15[disruptor-3]ERROR c.m.m d.h. DatalWrapperEventHandler - workHandler-3解析队列数据对象 保存病人药品医嘱信息-&amp;gt;null&lt;br&gt;java.lang.NullPointerException: null&lt;br&gt;&amp;nbsp;at com.medicom.modules.disruptor.handler.DatawrapperEventHandler.onEvent(DatawrapperEventHandler.java:40)&lt;br&gt;&amp;nbsp;at com.medicom.modules.disruptor.handler.DataWrapperEventHandler.onEvent (DatawrapperEventHandler.java:18)&lt;br&gt;at com.lmax.disruptor.workProcessor.run (WorkProcessor.java:143)&lt;br&gt;&lt;br&gt;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&lt;br&gt;at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:624)&lt;br&gt;at java.lang.Thread.run (Thread.java : 748)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;EnCache，在高并发下面报错：&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;存放encache+类有继承关系，类需要实现Serialzable接口，且在子类上需要加上@EqualsAndHashCode(callSuper=true)，防止从磁盘里面读取进行反序列化时父类为null。&amp;nbsp;" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1140" y="-350" width="670" height="390" as="geometry" />
        </mxCell>
        <mxCell id="GLIDyd0n-ON3j2NHpdD_-2" value="表分区，分区到不同磁盘？好处是什么？" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="720" y="-270" width="300" height="60" as="geometry" />
        </mxCell>
        <mxCell id="52weYLeMf9iYNcdraF4N-1" value="&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;，优化性能，发现很多类的转换，开始用的&lt;/font&gt;BeanUtil.toBean，这种是通过反射的方式来得到转换后的对象，&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;高并发下测试比较耗费性能。每个响应多耗时400ms,并发数少20个。&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;ClinicMainTaskInfo entity = BeanUtil.toBean(bean, PrClassUtils.CLINIC_MAIN_TASK_INFO);&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 18px;&quot;&gt;ClinicMainTaskInfo entity = TaskInfoMainBeanConvert.INSTANCE.convertToClinicMainTaskInfo(bean);&lt;/font&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="1890" y="-310" width="900" height="350" as="geometry" />
        </mxCell>
        <mxCell id="52weYLeMf9iYNcdraF4N-2" value="&lt;pre style=&quot;font-size: 18px;&quot;&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:&#39;JetBrains Mono&#39;,monospace;font-size:12.0pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;org.mapstruct.&lt;span style=&quot;color:#bbb529;&quot;&gt;Mapper&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;import &lt;/span&gt;org.mapstruct.factory.Mappers&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@ClassName: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;TaskInfoMainBeanConvert&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;转换主任务对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Version: &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;V1.0&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt; */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Mapper&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;TaskInfoMainBeanConvert {&lt;br&gt;    TaskInfoMainBeanConvert &lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;INSTANCE &lt;/span&gt;= Mappers.&lt;span style=&quot;font-style:italic;&quot;&gt;getMapper&lt;/span&gt;(TaskInfoMainBeanConvert.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@param &lt;/span&gt;&lt;span style=&quot;color:#8a653b;font-style:italic;&quot;&gt;bean &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;待转化对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@return &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Date &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;TaskInfoMainBean &lt;span style=&quot;color:#ffc66d;&quot;&gt;convertToTaskInfoMainBean&lt;/span&gt;(TaskInfoMainBean bean)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;/**&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@param &lt;/span&gt;&lt;span style=&quot;color:#8a653b;font-style:italic;&quot;&gt;bean &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;待转化对象&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@return &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;ClinicMainTaskInfo&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     * &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Description &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;font-family:&#39;宋体&#39;,monospace;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color:#629755;font-weight:bold;font-style:italic;&quot;&gt;@Author&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;     */&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;ClinicMainTaskInfo &lt;span style=&quot;color:#ffc66d;&quot;&gt;convertToClinicMainTaskInfo&lt;/span&gt;(TaskInfoMainBean bean)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;InHospMainTaskInfo &lt;span style=&quot;color:#ffc66d;&quot;&gt;convertToInHospMainTaskInfo&lt;/span&gt;(TaskInfoMainBean bean)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color:#629755;font-style:italic;&quot;&gt;    &lt;/span&gt;InterMainTaskInfo &lt;span style=&quot;color:#ffc66d;&quot;&gt;convertToInterMainTaskInfo&lt;/span&gt;(TaskInfoMainBean bean)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br&gt;&lt;/span&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/pre&gt;" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="2895" y="-330" width="745" height="880" as="geometry" />
        </mxCell>
        <mxCell id="CAA8TabalaVCixUhrOd4-1" value="可以回退到12月份代码进行性能测试。" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="2160" y="-410" width="290" height="80" as="geometry" />
        </mxCell>
        <mxCell id="4FLja5BOqqyU_yTpesLY-1" value="IM，有一个问题，超过6个页面嵌套之后，会导致浏览器请求卡死。&lt;br&gt;&lt;p&gt;浏览器对同一个域名下并行连接数有限制，这一限制通常被称为&quot;并发连接数&quot;。这是因为浏览器为了避免过多的并发请求对网络性能造成负面影响，对同一个域名下的并发连接数进行了限制。&lt;/p&gt;&lt;p&gt;通常，对于 HTTP/1.1 协议，浏览器对同一域名下的并发连接数限制为 6-8 个&lt;/p&gt;&lt;p&gt;具体原因：因为要兼容IE6，所以不能使用WebSocket的方式，使用的是comet方式通信&lt;/p&gt;&lt;p&gt;Comet 是一种通过持续连接（long-polling 或 streaming）实现服务器推送数据到客户端的通信方式，以实现实时更新的目的。这种通信方式主要应用于需要实时性的网络应用，比如聊天应用、实时消息推送等。&lt;br&gt;&lt;/p&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Long Polling（长轮询）：&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;在长轮询中，客户端向服务器发送一个请求，并保持该请求处于挂起状态，直到服务器有新的数据可用或超时为止。&lt;/li&gt;&lt;li&gt;服务器在有新数据可用时，立即将数据发送给客户端，并关闭连接。&lt;/li&gt;&lt;li&gt;客户端在收到数据后，立即发起下一个请求，保持连接处于持续状态。&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Streaming（流式传输）：&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;在流式传输中，客户端与服务器建立一条持久连接，服务器可以在任何时候向客户端发送数据。&lt;/li&gt;&lt;li&gt;服务器将数据以流的形式发送给客户端，客户端可以实时接收并处理这些数据。&lt;/li&gt;&lt;li&gt;这种方式相比长轮询来说，更加实时，因为在有新数据时，服务器可以立即将其推送给客户端。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;Comet 方式通信的优点包括实时性强、无需频繁的轮询请求、降低了延迟等。然而，也存在一些缺点，如较高的服务器资源占用、可能会受到浏览器连接数限制等。&lt;/p&gt;&lt;p&gt;在现代的 Web 开发中，WebSocket 技术逐渐成为了一种更为高效的实时通信方式，因为它提供了双向通信的能力，而不需要像 Comet 那样通过多次 HTTP 请求。WebSocket 允许服务器主动向客户端推送消息，同时保持低延迟和更高的效率。&lt;/p&gt;&lt;/li&gt;&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;verticalAlign=top;align=left;" parent="1" vertex="1">
          <mxGeometry x="30" y="-820" width="600" height="570" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
